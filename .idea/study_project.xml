<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="16" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <HyperskillCourse>
          <option name="authors">
            <list />
          </option>
          <option name="courseMode" value="Study" />
          <option name="customPresentableName" />
          <option name="description" value="Files come in all possible formats: we usually see it specified in their names. In any case, information about the type is always contained within the file: in this project, you will learn to extract this info. Write a program that can analyze a file and determine its type.&lt;br/&gt;&lt;br/&gt;Learn more at &lt;a href=&quot;https://hyperskill.org&quot;&gt;https://hyperskill.org/projects/64&lt;/a&gt;" />
          <option name="environment" value="" />
          <option name="id" value="0" />
          <option name="index" value="-1" />
          <option name="language" value="JAVA 11" />
          <option name="languageCode" value="en" />
          <option name="name" value="File Type Analyzer (Java)" />
          <option name="stages">
            <list>
              <HyperskillStage>
                <option name="id" value="343" />
                <option name="stepId" value="5485" />
                <option name="title" value="Is this a PDF?" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="344" />
                <option name="stepId" value="5486" />
                <option name="title" value="KMP algorithm" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="345" />
                <option name="stepId" value="5487" />
                <option name="title" value="Wanted!" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="346" />
                <option name="stepId" value="5488" />
                <option name="title" value="A question of priorities" />
              </HyperskillStage>
              <HyperskillStage>
                <option name="id" value="347" />
                <option name="stepId" value="5489" />
                <option name="title" value="Rabin-Karp" />
              </HyperskillStage>
            </list>
          </option>
          <option name="taskToTopics">
            <map>
              <entry key="0">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="117" />
                      <option name="theoryId" value="3614" />
                      <option name="title" value="Introduction to OOP" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="480" />
                      <option name="theoryId" value="6577" />
                      <option name="title" value="Command line overview" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="1">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="266" />
                      <option name="theoryId" value="4953" />
                      <option name="title" value="Computer algorithms" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="263" />
                      <option name="theoryId" value="4991" />
                      <option name="title" value="The big O notation" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="157" />
                      <option name="theoryId" value="3611" />
                      <option name="title" value="The concept of patterns" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="322" />
                      <option name="theoryId" value="5141" />
                      <option name="title" value="String basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="321" />
                      <option name="theoryId" value="5194" />
                      <option name="title" value="Searching a substring" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="469" />
                      <option name="theoryId" value="6413" />
                      <option name="title" value="Prefix function" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="339" />
                      <option name="theoryId" value="6454" />
                      <option name="title" value="Knuth-Morris-Pratt algorithm" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="379" />
                      <option name="theoryId" value="5712" />
                      <option name="title" value="Searching a substring in Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="380" />
                      <option name="theoryId" value="5725" />
                      <option name="title" value="Knuth-Morris-Pratt algorithm in Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="159" />
                      <option name="theoryId" value="3556" />
                      <option name="title" value="Strategy" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="2">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="62" />
                      <option name="theoryId" value="3600" />
                      <option name="title" value="Basics of multithreading" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="295" />
                      <option name="theoryId" value="4875" />
                      <option name="title" value="Threads as objects" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="294" />
                      <option name="theoryId" value="4876" />
                      <option name="title" value="Custom threads" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="72" />
                      <option name="theoryId" value="3619" />
                      <option name="title" value="Thread management" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="297" />
                      <option name="theoryId" value="4882" />
                      <option name="title" value="Exceptions in threads" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="296" />
                      <option name="theoryId" value="4881" />
                      <option name="title" value="Interruptions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="299" />
                      <option name="theoryId" value="4895" />
                      <option name="title" value="Executors" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="167" />
                      <option name="theoryId" value="3492" />
                      <option name="title" value="Generic programming" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="43" />
                      <option name="theoryId" value="3591" />
                      <option name="title" value="Basics of collections" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="42" />
                      <option name="theoryId" value="3581" />
                      <option name="title" value="List" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="48" />
                      <option name="theoryId" value="3601" />
                      <option name="title" value="Functional interfaces and lambda expressions" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="300" />
                      <option name="theoryId" value="4905" />
                      <option name="title" value="Callable and Future" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="6" />
                      <option name="theoryId" value="3595" />
                      <option name="title" value="Boxing &amp;&amp; unboxing" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="3">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="410" />
                      <option name="theoryId" value="5984" />
                      <option name="title" value="Recursion basics" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="274" />
                      <option name="theoryId" value="4954" />
                      <option name="title" value="The sorting problem" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="269" />
                      <option name="theoryId" value="4963" />
                      <option name="title" value="Insertion sort" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="273" />
                      <option name="theoryId" value="4964" />
                      <option name="title" value="Merge sort" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="140" />
                      <option name="theoryId" value="3529" />
                      <option name="title" value="Insertion sort in Java" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="143" />
                      <option name="theoryId" value="3527" />
                      <option name="title" value="Merge sort in Java" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
              <entry key="4">
                <value>
                  <list>
                    <HyperskillTopic>
                      <option name="id" value="472" />
                      <option name="theoryId" value="6420" />
                      <option name="title" value="String hashing" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="338" />
                      <option name="theoryId" value="5267" />
                      <option name="title" value="Rabin-Karp algorithm" />
                    </HyperskillTopic>
                    <HyperskillTopic>
                      <option name="id" value="381" />
                      <option name="theoryId" value="5719" />
                      <option name="title" value="Rabin-Karp algorithm in Java" />
                    </HyperskillTopic>
                  </list>
                </value>
              </entry>
            </map>
          </option>
          <option name="updateDate" value="0" />
          <option name="hyperskillProject">
            <HyperskillProject>
              <option name="description" value="Files come in all possible formats: we usually see it specified in their names. In any case, information about the type is always contained within the file: in this project, you will learn to extract this info. Write a program that can analyze a file and determine its type." />
              <option name="id" value="64" />
              <option name="ideFiles" value="https://stepik.org/media/attachments/lesson/210127/additional_files.json" />
              <option name="language" value="java" />
              <option name="templateBased" value="false" />
              <option name="title" value="File Type Analyzer (Java)" />
              <option name="useIde" value="true" />
            </HyperskillProject>
          </option>
          <option name="items">
            <list>
              <FrameworkLesson>
                <option name="currentTaskIndex" value="4" />
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="1" />
                <option name="name" value="File Type Analyzer (Java)" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;In this project, you will learn how to make a tool for determining file type. It's not like determining file type based on the extension of the file; the filename can be random. Actually, many file types contain special byte sequences that make it easy to determine them. You’ll start from a simple program which can only search for an occurrence of the specific pattern inside a single file and gradually turn it into a more practical solution which can check hundreds and thousands of files against a huge pattern set. Each pattern has information about a file type which will be reported to the user when there is a successful match.&lt;/p&gt;&#10;&#10;&lt;p&gt;This approach is widely used in many different applications. For example the &lt;a href=&quot;https://en.wikipedia.org/wiki/File_(command)&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;Unix “file” tool&lt;/a&gt; relies on a sophisticated “magic” database (it consists of a pattern set written in specific language), antivirus and malware-detection tools search the malicious signatures inside user’s files, and firewalls do the same with a system’s network traffic (as well as DPI systems). &lt;/p&gt;&#10;&#10;&lt;p&gt;Let’s begin with an elementary prototype of our file type checker. Write a program which accepts a pattern and its file type and matches the pattern against some file.&lt;/p&gt;&#10;&#10;&lt;p&gt;Here we deﬁne pattern as a pair of two strings: {P, R}, where P is a pattern itself and R is a resulting ﬁle type which corresponds to pattern P. If the string P is found in the ﬁle then your program should return R as ﬁle type. For example, for the following pattern&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code&gt; {&quot;%PDF-&quot;, &quot;PDF document&quot;} &lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;the program will search for a &lt;code&gt;&quot;%PDF-&quot;&lt;/code&gt; in a ﬁle’s binary data and if found successfully will determine ﬁle type as &lt;code&gt;&quot;PDF document&quot;&lt;/code&gt;. Note that the pattern can be anywhere in the file, not just at the start of the file. You can see here in the row with &quot;Magic number&quot; there is the &lt;code&gt;&quot;%PDF&quot;&lt;/code&gt; pattern, but actually after this pattern, the  &lt;code&gt;&quot;-&quot;&lt;/code&gt; symbol always appears,&lt;strong&gt; &lt;/strong&gt;so the pattern described above is stricter.&lt;/p&gt;&#10;&#10;&lt;p&gt;You can use &lt;a href=&quot;https://www.codejava.net/java-se/file-io/how-to-read-and-write-binary-files-in-java&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;this&lt;/a&gt; link to see how to open a file in binary.&lt;/p&gt;&#10;&#10;&lt;p&gt;Write a program which accepts a ﬁle name and pattern and searches for an occurrence of the pattern in this ﬁle. If the pattern matched at least once the program should report its type. If there were no matches, print “Unknown ﬁle type”.&lt;/p&gt;&#10;&#10;&lt;p&gt;Your program should accept three arguments: the file to check (relative path), the pattern string (P), and the result string (R).&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;The examples below show how your output might look.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main doc.pdf &quot;%PDF-&quot; &quot;PDF document&quot;&#10;PDF document&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main picture.jpg &quot;%PDF-&quot; &quot;PDF document&quot;&#10;Unknown file type&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/64/stages/343/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5485" />
                      <option name="index" value="1" />
                      <option name="name" value="Is this a PDF?" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/analyzer/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Main.java" />
                                <option name="text" value="package analyzer;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/FileTypeAnalyzerTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/FileTypeAnalyzerTest.java" />
                                <option name="text" value="&#10;import analyzer.Main;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;&#10;import java.util.List;&#10;&#10;class Clue {&#10;    String response;&#10;    String feedback;&#10;&#10;    Clue(String response, String feedback) {&#10;        this.response = response;&#10;        this.feedback = feedback;&#10;    }&#10;}&#10;&#10;public class FileTypeAnalyzerTest extends BaseStageTest&lt;Clue&gt; {&#10;    public FileTypeAnalyzerTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.pdf&quot;, &quot;%PDF-&quot;, &quot;PDF document&quot;})&#10;                .addFile(&quot;doc.pdf&quot;, &quot;PFDF%PDF-PDF&quot;)&#10;                .setAttach(new Clue(&quot;PDF document&quot;, &quot;The file had following content: &quot; +&#10;                    &quot;PFDF%PDF-PDF and was analyzed for pattern %PDF-&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.txt&quot;, &quot;%PDF-&quot;, &quot;PDF document&quot;})&#10;                .addFile(&quot;doc.txt&quot;, &quot;PFDF%PDF-PDF&quot;)&#10;                .setAttach(new Clue(&quot;PDF document&quot;, &quot;The file had following content: &quot; +&#10;                    &quot;PFDF%PDF-PDF and was analyzed for pattern %PDF-&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.pdf&quot;, &quot;%PDF-&quot;, &quot;PDF document&quot;})&#10;                .addFile(&quot;doc.pdf&quot;, &quot;PFDFPDF&quot;)&#10;                .setAttach(new Clue(&quot;Unknown file type&quot;, &quot;The file had following content: &quot; +&#10;                    &quot;PFDFPDF and was analyzed for pattern %PDF-&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.txt&quot;, &quot;%PDF-&quot;, &quot;PDF document&quot;})&#10;                .addFile(&quot;doc.txt&quot;, &quot;PFDFPDF&quot;)&#10;                .setAttach(new Clue(&quot;Unknown file type&quot;, &quot;The file had following content: &quot; +&#10;                    &quot;PFDFPDF and was analyzed for pattern %PDF-&quot;)),&#10;&#10;&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.pdf&quot;, &quot;%DOC-&quot;, &quot;DOC document&quot;})&#10;                .addFile(&quot;doc.pdf&quot;, &quot;PFDF%DOC-PDF&quot;)&#10;                .setAttach(new Clue(&quot;DOC document&quot;, &quot;The file had following content: &quot; +&#10;                    &quot;PFDF%PDF-PDF and was analyzed for pattern %PDF-&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.txt&quot;, &quot;%DOC-&quot;, &quot;DOC document&quot;})&#10;                .addFile(&quot;doc.txt&quot;, &quot;PFDF%DOC-PDF&quot;)&#10;                .setAttach(new Clue(&quot;DOC document&quot;, &quot;&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.pdf&quot;, &quot;%DOC-&quot;, &quot;DOC document&quot;})&#10;                .addFile(&quot;doc.pdf&quot;, &quot;PFDFPDF&quot;)&#10;                .setAttach(new Clue(&quot;Unknown file type&quot;, &quot;&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;doc.txt&quot;, &quot;%DOC-&quot;, &quot;DOC document&quot;})&#10;                .addFile(&quot;doc.txt&quot;, &quot;PFDFPDF&quot;)&#10;                .setAttach(new Clue(&quot;Unknown file type&quot;, &quot;&quot;))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        String actual = reply.strip();&#10;        String expected = clue.response.strip();&#10;        return new CheckResult(actual.equals(expected),&#10;            clue.feedback + &quot;\nExpected result: &quot; + expected +&#10;                &quot;\nActual result: &quot; + actual);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924030000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Improve your file type checker’s pattern match logic by rewriting the pattern search algorithm. Use some of the advanced algorithms you have learned so far like the Knuth-Morris-Pratt algorithm. Check your program’s search performance with some huge file. Compare your improved search engine with a naive implementation. If you’re a Linux user, you can use &lt;code&gt;&quot;time&quot;&lt;/code&gt; for measuring execution time, (see &lt;code&gt;man time&lt;/code&gt; for details). Otherwise, you can use &lt;code&gt;nanoTime()&lt;/code&gt; from the &lt;code&gt;java.lang.System&lt;/code&gt; class. Check the &lt;a href=&quot;https://docs.oracle.com/javase/10/docs/api/java/lang/System.html#nanoTime()&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;official documentation&lt;/a&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;Your program should accept another argument, that represents an algorithm - a naive implementation that you implemented in the previous step marked as &lt;code&gt;--naive&lt;/code&gt; and KMP algorithm marked as &lt;code&gt;--KMP&lt;/code&gt;. Other arguments should be parsed after this one - file name, pattern and file type.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output examples&lt;/h2&gt;&#10;&#10;&lt;p&gt;First, we checked the naive implementation, and it took roughly 5 seconds. Then KMP showed 5 times better performance. You should expect similar behavior from your program.&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main --naive huge_doc.pdf &quot;%PDF-&quot; &quot;PDF document&quot;&#10;PDF document&#10;It took 5.011 seconds&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main --KMP huge_doc.pdf &quot;%PDF-&quot; &quot;PDF document&quot;&#10;PDF document&#10;It took 1.037 seconds&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main --naive pic.png &quot;%PDF-&quot; &quot;PDF document&quot;&#10;Unknown file type&#10;It took 3.641 seconds&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main --KMP pic.png &quot;%PDF-&quot; &quot;PDF document&quot;&#10;Unknown file type&#10;It took 0.469 seconds&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/64/stages/344/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5486" />
                      <option name="index" value="2" />
                      <option name="name" value="KMP algorithm" />
                      <option name="record" value="2" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/Clue.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Clue.java" />
                                <option name="text" value="public class Clue {&#10;    public String response;&#10;&#10;    public Clue(String response) {&#10;        this.response = response;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/ContainsSearch.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/ContainsSearch.java" />
                                <option name="text" value="public class ContainsSearch {&#10;    public static long searchForPattern(String[] args) {&#10;        String pattern = args[1];&#10;        String patternName = args[2];&#10;        String fileContent = args[0];&#10;        String unknownFileType = &quot;Unknown file type&quot;;&#10;        long timeStart = System.nanoTime();&#10;        if (fileContent.contains(pattern) /*!kmpSearch(fileContent.toString(), pattern).isEmpty()*/) {&#10;            return System.nanoTime() - timeStart;&#10;        }&#10;        return 0;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/MainTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MainTest.java" />
                                <option name="text" value="&#10;import analyzer.Main;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import org.junit.BeforeClass;&#10;&#10;import java.util.List;&#10;&#10;public class MainTest extends BaseStageTest&lt;Clue&gt; {&#10;    static String largeContent;&#10;&#10;    String pdf = &quot;PDF document&quot;;&#10;    String doc = &quot;DOC document&quot;;&#10;    String unknown = &quot;Unknown file type&quot;;&#10;    String file = &quot;doc.pdf&quot;;&#10;&#10;    public MainTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[] {&#10;                        &quot;--naive&quot;,&#10;                        file,&#10;                        &quot;%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF-&quot;,&#10;                        pdf&#10;                    })&#10;                .addFile(file, largeContent)&#10;                .setAttach(new Clue(pdf)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[] {&#10;                        &quot;--KMP&quot;,&#10;                        file,&#10;                        &quot;%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF-&quot;,&#10;                        doc&#10;                    })&#10;                .addFile(file, largeContent)&#10;                .setAttach(new Clue(doc)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[] {&#10;                        &quot;--naive&quot;,&#10;                        file,&#10;                        &quot;%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF+&quot;,&#10;                        unknown&#10;                    })&#10;                .addFile(file, largeContent)&#10;                .setAttach(new Clue(unknown)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[] {&#10;                        &quot;--KMP&quot;,&#10;                        file,&#10;                        &quot;%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF%PDF+&quot;,&#10;                        unknown&#10;                    })&#10;                .addFile(file, largeContent)&#10;                .setAttach(new Clue(unknown))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        reply = reply.strip();&#10;&#10;        if (reply.contains(doc) &amp;&amp; reply.contains(pdf)) {&#10;            return CheckResult.FALSE(&quot;There are both \&quot;&quot; + doc + &quot;\&quot; and \&quot;&quot; + pdf + &quot;\&quot;&quot; +&#10;                &quot; in output, should be only one of them&quot;);&#10;        } else if (reply.contains(doc) &amp;&amp; reply.contains(unknown)) {&#10;            return CheckResult.FALSE(&quot;There are both \&quot;&quot; + doc + &quot;\&quot; and \&quot;&quot; + unknown + &quot;\&quot;&quot; +&#10;                &quot; in output, should be only one of them&quot;);&#10;        } else if (reply.contains(pdf) &amp;&amp; reply.contains(unknown)) {&#10;            return CheckResult.FALSE(&quot;There are both \&quot;&quot; + pdf + &quot;\&quot; and \&quot;&quot; + unknown + &quot;\&quot;&quot; +&#10;                &quot; in output, should be only one of them&quot;);&#10;        }&#10;&#10;        if (!reply.contains(clue.response)) {&#10;            return CheckResult.FALSE(&quot;Your output does not contain \&quot;&quot; + clue.response + &quot;\&quot;, but should.&quot; +&#10;                &quot;\n\nYour output:\n&quot; + reply);&#10;        }&#10;&#10;        if (!reply.contains(&quot;seconds&quot;)) {&#10;            return CheckResult.FALSE(&quot;Your output does not contain \&quot;seconds\&quot;, but should.&quot; +&#10;                &quot;\n\nYour output:\n&quot; + reply);&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;&#10;    @BeforeClass&#10;    public static void setLargeContent() {&#10;&#10;        StringBuilder content = new StringBuilder();&#10;&#10;        for (int i = 0; i&lt; 6000; i++) {&#10;            content.append(&quot;%PDF&quot;);&#10;        }&#10;&#10;        content.append(&quot;%PDF-&quot;);&#10;        largeContent = content.toString();&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/NaiveSearch.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/NaiveSearch.java" />
                                <option name="text" value="&#10;&#10;public class NaiveSearch {&#10;    public static long searchForPattern(String[] args) {&#10;        String pattern = args[1];&#10;        String fileContent = args[0];&#10;        long timeStart = System.nanoTime();&#10;        if (naiveSearch(fileContent, pattern)) {&#10;            return System.nanoTime() - timeStart;&#10;        }&#10;        return 0;&#10;    }&#10;&#10;&#10;    public static boolean naiveSearch (String text, String pattern) {&#10;        int textLength = text.length();&#10;        int patternLength = pattern.length();&#10;        for (int i = 0; i&lt;textLength - patternLength + 1; i++) {&#10;            for (int j = 0; j&lt; patternLength; j++) {&#10;                if (!(text.charAt(i+j) == pattern.charAt(j))) {&#10;                    break;&#10;                }&#10;                else if (j == patternLength -1) return true;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Main.java" />
                                <option name="text" value="package analyzer;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924031000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;Let’s make another improvement. The pattern search engine is pretty fast now. However, if we want to check multiple files we should pass them to the checker one by one and match them consequently. Parallelize your checker to handle multiple files.&lt;/p&gt;&#10;&#10;&lt;p&gt;Now your search engine must deal with multiple files. Hint: your program can be organized as several workers. Each worker is equivalent (logically) to the single-threaded pattern matcher: it takes several files and matches them consequently using the searching algorithm. The answers of each worker will be aggregated as the total execution result.&lt;/p&gt;&#10;&#10;&lt;p&gt;Your program should accept two strings: P and R as the first two arguments.P and R represents the pattern to check. Then it should take a folder’s path which contains all of the files to be checked by your program.&lt;/p&gt;&#10;&#10;&lt;p&gt;For this stage, you should use only the KMP algorithm.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main &quot;-----BEGIN\ CERTIFICATE-----&quot; &quot;PEM certificate&quot; test_files&#10;file.pem: PEM certificate&#10;doc_1.docx: Unknown file type&#10;doc_2.pdf: Unknown file type&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main &quot;%PDF-&quot; &quot;PDF document&quot; test_files&#10;file.pem: Unknown file type&#10;doc_1.docx: Unknown file type&#10;doc_2.pdf: PDF document&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/64/stages/345/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5487" />
                      <option name="index" value="3" />
                      <option name="name" value="Wanted!" />
                      <option name="record" value="3" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/Clue.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Clue.java" />
                                <option name="text" value="public class Clue {&#10;    public String output;&#10;    public int threadsStarted;&#10;    public String feedback;&#10;&#10;    public Clue(String output, int threadsStarted, String feedback) {&#10;        this.output = output;&#10;        this.threadsStarted = threadsStarted;&#10;        this.feedback = feedback;&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/MainTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MainTest.java" />
                                <option name="text" value="&#10;import analyzer.Main;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import org.junit.AfterClass;&#10;import org.junit.Assert;&#10;import org.junit.BeforeClass;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.lang.management.ManagementFactory;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;&#10;public class MainTest extends BaseStageTest&lt;Clue&gt; {&#10;    private static final String CURRENT_DIR = System.getProperty(&quot;user.dir&quot;) + File.separator;&#10;    private static int startedThreadCount = 0;&#10;&#10;    public MainTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            //Testing basic cases&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;test_files&quot;, &quot;%PDF-&quot;, &quot;PDF document&quot;})&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc.pdf&quot;, &quot;PFDF%PDF-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;text.txt&quot;, &quot;PF%PDF-PDFABC&quot;)&#10;                .setAttach(new Clue(&quot;doc.pdf: PDF document\n&quot; +&#10;                    &quot;text.txt: PDF document&quot;, 2, &quot;The files had following content: &quot; +&quot;\n&quot; +&#10;                    &quot;\&quot;PFDF%PDF-PDF\&quot;, \&quot;PF%PDF-PDFABC\&quot; and were analyzed for pattern \&quot;%PDF-\&quot;&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;test_files&quot;, &quot;-----BEGIN\\CERTIFICATE-----&quot;, &quot;PEM certificate&quot;})&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;file.pem&quot;, &quot;PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;file.pdf&quot;, &quot;PF%P-----BEGIN\\CERTIFICATE-----DF-PDF&quot;)&#10;                .setAttach(new Clue(&quot;file.pdf: PEM certificate\n&quot; +&#10;                    &quot;file.pem: PEM certificate&quot;, 2, &quot;&quot;)),&#10;&#10;            //Testing with only one file in the directory&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;test_files&quot;, &quot;-----BEGIN\\CERTIFICATE-----&quot;, &quot;PEM certificate&quot;})&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;the_only_file.pem&quot;, &quot;PF-----BEGIN\\CERTIFICATE-----DF%PDF-PDF&quot;)&#10;                .setAttach(new Clue (&quot;the_only_file.pem: PEM certificate&quot;, 1, &quot;&quot;)),&#10;&#10;            //Testing with 10 files in the directory&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {&quot;test_files&quot;, &quot;%txt-&quot;, &quot;TXT document&quot;})&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc0.pdf&quot;, &quot;PFDF%PDF%txt-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc1.pdf&quot;, &quot;PF%PDF%txt-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc2.pdf&quot;, &quot;PFDF%PDF%txt-PF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc3.pdf&quot;, &quot;PF%PF%txt-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc4.pdf&quot;, &quot;PFDF%PDF%txt-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc5.pdf&quot;, &quot;PF%PDF%txt-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc6.pdf&quot;, &quot;PFF%PDF%txt-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc7.pdf&quot;, &quot;PF%DF%txt-PDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc8.pdf&quot;, &quot;PFDF%PDFPDF&quot;)&#10;                .addFile(&quot;test_files&quot;+File.separator+&quot;doc9.txt&quot;, &quot;PF%PDF%PDF&quot;)&#10;                .setAttach(new Clue(&quot;doc0.pdf: TXT document\n&quot; +&#10;                    &quot;doc1.pdf: TXT document\n&quot; +&#10;                    &quot;doc2.pdf: TXT document\n&quot; +&#10;                    &quot;doc3.pdf: TXT document\n&quot; +&#10;                    &quot;doc4.pdf: TXT document\n&quot; +&#10;                    &quot;doc5.pdf: TXT document\n&quot; +&#10;                    &quot;doc6.pdf: TXT document\n&quot; +&#10;                    &quot;doc7.pdf: TXT document\n&quot; +&#10;                    &quot;doc8.pdf: Unknown file type\n&quot; +&#10;                    &quot;doc9.txt: Unknown file type&quot;, 10, &quot;&quot;))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        checkThreads(clue);&#10;        String actual = reply.strip();&#10;        if (actual.isEmpty()) {&#10;            actual = &quot;No output (check if you exited &quot; +&#10;                &quot;from main too early, you should wait until all threads are finishes)&quot;;&#10;        }&#10;        String expected = clue.output;&#10;        return new CheckResult(actual.equals(expected),&#10;            clue.feedback + &quot;\nExpected: \n&quot; + expected&#10;            + &quot;\nActual: \n&quot; + actual);&#10;    }&#10;&#10;    public void checkThreads(Clue clue) {&#10;        startedThreadCount += clue.threadsStarted;&#10;        long currentThreads = ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();&#10;        Assert.assertTrue(&#10;            &quot;There were not enough Threads started, &quot; +&#10;                &quot;you should process each file in a different Thread&quot;,&#10;            startedThreadCount &lt;= currentThreads);&#10;    }&#10;&#10;    @BeforeClass&#10;    public static void generateTestFilesDirectory() {&#10;        try {&#10;            Files.deleteIfExists(Paths.get(CURRENT_DIR + &quot;test_files&quot;));&#10;        }&#10;        catch (IOException ex) {&#10;            ex.printStackTrace();&#10;        }&#10;        try {&#10;            Files.createDirectory(Paths.get(CURRENT_DIR + &quot;test_files&quot;));&#10;        }&#10;        catch (IOException ex) {&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;    @BeforeClass&#10;    public static void countThreadsBefore() {&#10;        startedThreadCount += ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();&#10;    }&#10;&#10;    @AfterClass&#10;    public static void deleteTestFilesDirectory() {&#10;        try {&#10;            Files.deleteIfExists(Paths.get(CURRENT_DIR + &quot;test_files&quot;));&#10;        }&#10;        catch (IOException ex) {&#10;            ex.printStackTrace();&#10;        }&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Main.java" />
                                <option name="text" value="package analyzer;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/Worker.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Worker.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924032000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;It is almost useless to have a pattern base with only one pattern. We need more. We can take patterns one by one from some storage and match them until we find a successful match. But what should we do if several patterns match successfully?&lt;/p&gt;&#10;&#10;&lt;p&gt;Extend your program to make it match several patterns against each file. Implement some prioritizing scheme for patterns to prevent ambiguity in case of multiple matches.&lt;/p&gt;&#10;&#10;&lt;p&gt;The &lt;code&gt;patterns.db&lt;/code&gt; consist of patterns with their priorities. You can download it &lt;a href=&quot;https://stepik.org/media/attachments/lesson/210127/patterns.db&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;here&lt;/a&gt;. For example:&lt;/p&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;4;&quot;PK&quot;;&quot;Zip archive&quot;&#10;7;&quot;word/_rels&quot;;&quot;MS Office Word 2007+&quot;&#10;7;&quot;ppt/_rels&quot;;&quot;MS Office PowerPoint 2007+&quot;&#10;7;&quot;xl/_rels&quot;;&quot;MS Office Excel 2007+&quot;&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt;Higher value means higher priority. In this example, the &lt;code&gt;&quot;Zip archive&quot;&lt;/code&gt; is a container for multiple files. But Microsoft Office files also stored as Zip archives, you can clearly see this if you rename file &lt;code&gt;&quot;file.docx&quot;&lt;/code&gt; to &lt;code&gt;&quot;file.zip&quot;&lt;/code&gt; you can unzip it - it contains a bunch of folders and a bunch of XMLs.  So, a Word file contais both &lt;code&gt;&quot;PK&quot;&lt;/code&gt; indicatind that this is a Zip archive and &lt;code&gt;&quot;word/_rels&quot;&lt;/code&gt; indicating that this is a Word document. In this situation you should choose a pattern with higher priority - &lt;code&gt;&quot;MS Office Word 2007+&quot;&lt;/code&gt;.&lt;/p&gt;&#10;&#10;&lt;p&gt;While developing your program you can use the attached file. It contains some patterns with different priorities sorted by their “accuracy” (for example, MSOffice 2007 documents store their data inside a zip archive, so the pattern for Office documents should be “stronger” than the pattern for zip archive).&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main patterns.db test_files&#10;test_filesdoc_0.doc: MS Office Word 2003&#10;doc_1.ppt: MS Office PowerPoint 2003&#10;file.zip: Zip archive&lt;/code&gt;&lt;/pre&gt;&#10;&#10;&lt;p&gt; &lt;/p&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/64/stages/346/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5488" />
                      <option name="index" value="4" />
                      <option name="name" value="A question of priorities" />
                      <option name="record" value="1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/Clue.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Clue.java" />
                                <option name="text" value="&#10;public class Clue {&#10;    public String first;&#10;    public String second;&#10;    public String feedback;&#10;&#10;    public Clue(String first, String second, String feedback) {&#10;        this.first = first;&#10;        this.second = second;&#10;        this.feedback = feedback;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/MainTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MainTest.java" />
                                <option name="text" value="&#10;import analyzer.Main;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import org.junit.AfterClass;&#10;import org.junit.Assert;&#10;import org.junit.BeforeClass;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.lang.management.ManagementFactory;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;&#10;public class MainTest extends BaseStageTest&lt;Clue&gt; {&#10;    private static final String CURRENT_DIR = System.getProperty(&quot;user.dir&quot;) + File.separator;&#10;    &#10;    private static String testFolder = &quot;test_files&quot;;&#10;    private static String files = testFolder + File.separator;&#10;    &#10;    private static String patternsDb = &quot;patterns.db&quot;;&#10;    private static final String patterns =&#10;        &quot;1;\&quot;%PDF-\&quot;;\&quot;PDF document\&quot;\n&quot; +&#10;        &quot;2;\&quot;pmview\&quot;;\&quot;PCP pmview config\&quot;\n&quot; +&#10;        &quot;4;\&quot;PK\&quot;;\&quot;Zip archive\&quot;\n&quot; +&#10;        &quot;5;\&quot;vnd.oasis.opendocument.presentation\&quot;;\&quot;OpenDocument presentation\&quot;\n&quot; +&#10;        &quot;6;\&quot;W.o.r.d\&quot;;\&quot;MS Office Word 2003\&quot;\n&quot; +&#10;        &quot;6;\&quot;P.o.w.e.r.P.o.i\&quot;;\&quot;MS Office PowerPoint 2003\&quot;\n&quot; +&#10;        &quot;7;\&quot;word/_rels\&quot;;\&quot;MS Office Word 2007+\&quot;\n&quot; +&#10;        &quot;7;\&quot;ppt/_rels\&quot;;\&quot;MS Office PowerPoint 2007+\&quot;\n&quot; +&#10;        &quot;7;\&quot;xl/_rels\&quot;;\&quot;MS Office Excel 2007+\&quot;\n&quot; +&#10;        &quot;8;\&quot;-----BEGIN\\ CERTIFICATE-----\&quot;;\&quot;PEM certificate\&quot;\n&quot; +&#10;        &quot;9;\&quot;ftypjp2\&quot;;\&quot;ISO Media JPEG 2000\&quot;\n&quot; +&#10;        &quot;9;\&quot;ftypiso2\&quot;;\&quot;ISO Media MP4 Base Media v2\&quot;\n&quot;;&#10;&#10;&#10;    public MainTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            //Testing basic cases&#10;            //PDF&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;doc.pdf&quot;, &quot;PFDF%PDF-PDF&quot;)&#10;                .addFile(files + &quot;text.pdf&quot;, &quot;PFPDF-PDFABC&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.pdf: PDF document&quot;,&#10;                    &quot;text.pdf: Unknown file type&quot;,&#10;                    &quot;Wrong answer for files with PDF documents&quot;)),&#10;&#10;            //Zip archive&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[] {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;doc.zip&quot;, &quot;PCK&quot;)&#10;                .addFile(files + &quot;doc1.zip&quot;, &quot;PKC&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.zip: Unknown file type&quot; ,&#10;                    &quot;doc1.zip: Zip archive&quot;,&#10;                    &quot;Wrong answer for files with Zip archives&quot;)),&#10;&#10;            //PCP pmview config&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;main&quot;, &quot;pmview&quot;)&#10;                .addFile(files + &quot;main.config&quot;, &quot;pmconfigview&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;main: PCP pmview config&quot;,&#10;                    &quot;main.config: Unknown file type&quot;,&#10;                    &quot;Wrong answer for PCP pmview config files&quot;)),&#10;&#10;            //OpenDocument presentation&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;slides1.odp&quot;, &quot;vnd.oasis.opendocument.presentation&quot;)&#10;                .addFile(files + &quot;slides2.odp&quot;, &quot;vnd.oasis.microsoft.presentation&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;slides1.odp: OpenDocument presentation&quot;,&#10;                    &quot;slides2.odp: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //MS Office Word 2003&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;txt.doc&quot;, &quot;wwwwwwwwW.o.r.d&quot;)&#10;                .addFile(files + &quot;doc.txt&quot;, &quot;W.o.r.kwwwwwwww&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.txt: Unknown file type&quot;,&#10;                    &quot;txt.doc: MS Office Word 2003&quot;,&#10;                    &quot;Wrong answer for Word 2003 files&quot;)),&#10;&#10;            //MS Office PowerPoint 2003&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;slides1.ptp&quot;, &quot;P.o.w.e.r.P.o.i&quot;)&#10;                .addFile(files + &quot;slides2.ptp&quot;, &quot;P.o.w.e.r.\\Sh.o.i&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;slides1.ptp: MS Office PowerPoint 2003&quot;,&#10;                    &quot;slides2.ptp: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //MS Office Word 2007+&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;txt.doc&quot;, &quot;\\word/_rels&quot;)&#10;                .addFile(files + &quot;doc.txt&quot;, &quot;word/\\_rels&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.txt: Unknown file type&quot;,&#10;                    &quot;txt.doc: MS Office Word 2007+&quot;,&#10;                    &quot;Wrong answer for Word 2007+ files&quot;)),&#10;&#10;            //MS Office PowerPoint 2007+&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;pres1.pptx&quot;, &quot;afeefa%ppt/_relsasdad&quot;)&#10;                .addFile(files + &quot;pres2.pptx&quot;, &quot;ppasfsfafdaet/_rels&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;pres1.pptx: MS Office PowerPoint 2007+&quot;,&#10;                    &quot;pres2.pptx: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //MS Office Excel 2007+&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;sheet1.xls&quot;, &quot;asdaxl/_rels&quot;)&#10;                .addFile(files + &quot;sheet2.xls&quot;, &quot;x2/_reasdadls&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;sheet1.xls: MS Office Excel 2007+&quot;,&#10;                    &quot;sheet2.xls: Unknown file type&quot;,&#10;                    &quot;Wrong answer for Excel 2007+ files&quot;)),&#10;&#10;            //PEM certificate&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;cert.pem&quot;, &quot;\\\\\\\\\\aasdw-----BEGIN\\ CERTIFICATE-----&quot;)&#10;                .addFile(files + &quot;cert_core.pem&quot;, &quot;\\\\\\\\\\adww-----BEGIN\\CERTIFICATE-----&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;cert.pem: PEM certificate&quot;,&#10;                    &quot;cert_core.pem: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //ISO Media JPEG 2000&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;1.jpg&quot;, &quot;ftypjp2ddddddaa&quot;)&#10;                .addFile(files + &quot;2.jpg&quot;, &quot;ftypdddjp2dadad&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;1.jpg: ISO Media JPEG 2000&quot;,&#10;                    &quot;2.jpg: Unknown file type&quot;,&#10;                    &quot;Wrong answer for ISO Media JPEG 2000 files&quot;)),&#10;&#10;            //ISO Media MP4 Base Media v2&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;tape.jpg&quot;, &quot;ftypiso2mp4&quot;)&#10;                .addFile(files + &quot;tape.mp4&quot;, &quot;mp4ffttypiso2&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;tape.jpg: ISO Media MP4 Base Media v2&quot;,&#10;                    &quot;tape.mp4: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //Testing patterns priority&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;tape2.jpg&quot;, &quot;PK W.o.r.d&quot;)&#10;                .addFile(files + &quot;tape2.mp4&quot;, &quot;%PDF-mp4fftypiso2&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;tape2.jpg: MS Office Word 2003&quot;,&#10;                    &quot;tape2.mp4: ISO Media MP4 Base Media v2&quot;,&#10;                    &quot;Wrong answer white testing priority&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;tape3.jpg&quot;, &quot;-----BEGIN\\ CERTIFICATE-----pmview&quot;)&#10;                .addFile(files + &quot;tape3.mp4&quot;, &quot;%PDF-ftypppfW.o.r.dftypiso&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;tape3.jpg: PEM certificate&quot;,&#10;                    &quot;tape3.mp4: MS Office Word 2003&quot;,&#10;                    &quot;&quot;))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        String actual = reply.strip();&#10;&#10;        if (!actual.contains(clue.first)) {&#10;            return CheckResult.FALSE(&#10;                clue.feedback + &quot;\n\n&quot; +&#10;                    &quot;Cannot find a line &quot; + clue.first + &quot;\nYour output:\n&quot; + actual&#10;            );&#10;        }&#10;&#10;        if (!actual.contains(clue.second)) {&#10;            return CheckResult.FALSE(&#10;                clue.feedback + &quot;\n\n&quot; +&#10;                    &quot;Cannot find a line &quot; + clue.second + &quot;\nYour output:\n&quot; + actual&#10;            );&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;&#10;    @BeforeClass&#10;    public static void generateTestFilesDirectory() {&#10;&#10;        deleteTestFilesDirectory();&#10;&#10;        try {&#10;            Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));&#10;        }&#10;        catch (IOException ex) {&#10;&#10;        }&#10;        try {&#10;            Files.createDirectory(Paths.get(CURRENT_DIR + testFolder));&#10;        }&#10;        catch (IOException ex) {&#10;&#10;        }&#10;    }&#10;&#10;&#10;    @AfterClass&#10;    public static void deleteTestFilesDirectory() {&#10;        try {&#10;            Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));&#10;        }&#10;        catch (IOException ex) {&#10;&#10;&#10;        }&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Main.java" />
                                <option name="text" value="package analyzer;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/Worker.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Worker.java" />
                                <option name="text" value="package analyzer;&#10;&#10;class Worker extends Thread {&#10;    String arg0;&#10;    String arg1;&#10;    String arg2;&#10;&#10;    public Worker(String a0, String a1, String a2){&#10;        arg0=a0;&#10;        arg1=a1;&#10;        arg2=a2;&#10;    }&#10;&#10;&#10;    @Override&#10;    public void run() {&#10;        try {&#10;            Main.checkFileType(&quot;--KMP&quot;, arg0, arg1, arg2);&#10;        } catch (Exception ignored) {&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/patterns.db">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/analyzer/patterns.db" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924033000" />
                    </EduTask>
                    <EduTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;h2&gt;Description&lt;/h2&gt;&#10;&#10;&lt;p&gt;The sequential pattern match is a serious bottleneck even if we use an advanced single pattern searching algorithm. Use the Rabin-Karp algorithm to make a multiple pattern matcher and make your checker show the best performance.&lt;/p&gt;&#10;&#10;&lt;h2&gt;Output example&lt;/h2&gt;&#10;&#10;&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;java Main patterns.db test_files&#10;doc_0.doc: MS Office Word 2003&#10;doc_1.pptx: MS Office PowerPoint 2007+&#10;doc_2.pdf: PDF document&#10;file.pem: PEM certificate&lt;/code&gt;&lt;/pre&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/projects/64/stages/347/implement" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5489" />
                      <option name="index" value="5" />
                      <option name="name" value="Rabin-Karp" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="test/MainTest.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/MainTest.java" />
                                <option name="text" value="&#10;import analyzer.Main;&#10;import org.hyperskill.hstest.v5.stage.BaseStageTest;&#10;import org.hyperskill.hstest.v5.testcase.CheckResult;&#10;import org.hyperskill.hstest.v5.testcase.TestCase;&#10;import org.junit.AfterClass;&#10;import org.junit.Assert;&#10;import org.junit.BeforeClass;&#10;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.lang.management.ManagementFactory;&#10;import java.nio.file.Files;&#10;import java.nio.file.Paths;&#10;import java.util.List;&#10;&#10;public class MainTest extends BaseStageTest&lt;Clue&gt; {&#10;    private static final String CURRENT_DIR = System.getProperty(&quot;user.dir&quot;) + File.separator;&#10;&#10;    private static String testFolder = &quot;test_files&quot;;&#10;    private static String files = testFolder + File.separator;&#10;&#10;    private static String patternsDb = &quot;patterns.db&quot;;&#10;    private static final String patterns =&#10;        &quot;1;\&quot;%PDF-\&quot;;\&quot;PDF document\&quot;\n&quot; +&#10;            &quot;2;\&quot;pmview\&quot;;\&quot;PCP pmview config\&quot;\n&quot; +&#10;            &quot;4;\&quot;PK\&quot;;\&quot;Zip archive\&quot;\n&quot; +&#10;            &quot;5;\&quot;vnd.oasis.opendocument.presentation\&quot;;\&quot;OpenDocument presentation\&quot;\n&quot; +&#10;            &quot;6;\&quot;W.o.r.d\&quot;;\&quot;MS Office Word 2003\&quot;\n&quot; +&#10;            &quot;6;\&quot;P.o.w.e.r.P.o.i\&quot;;\&quot;MS Office PowerPoint 2003\&quot;\n&quot; +&#10;            &quot;7;\&quot;word/_rels\&quot;;\&quot;MS Office Word 2007+\&quot;\n&quot; +&#10;            &quot;7;\&quot;ppt/_rels\&quot;;\&quot;MS Office PowerPoint 2007+\&quot;\n&quot; +&#10;            &quot;7;\&quot;xl/_rels\&quot;;\&quot;MS Office Excel 2007+\&quot;\n&quot; +&#10;            &quot;8;\&quot;-----BEGIN\\ CERTIFICATE-----\&quot;;\&quot;PEM certificate\&quot;\n&quot; +&#10;            &quot;9;\&quot;ftypjp2\&quot;;\&quot;ISO Media JPEG 2000\&quot;\n&quot; +&#10;            &quot;9;\&quot;ftypiso2\&quot;;\&quot;ISO Media MP4 Base Media v2\&quot;\n&quot;;&#10;&#10;&#10;    public MainTest() throws Exception {&#10;        super(Main.class);&#10;    }&#10;&#10;    @Override&#10;    public List&lt;TestCase&lt;Clue&gt;&gt; generate() {&#10;        return List.of(&#10;            //Testing basic cases&#10;            //PDF&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;doc.pdf&quot;, &quot;PFDF%PDF-PDF&quot;)&#10;                .addFile(files + &quot;text.pdf&quot;, &quot;PFPDF-PDFABC&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.pdf: PDF document&quot;,&#10;                    &quot;text.pdf: Unknown file type&quot;,&#10;                    &quot;Wrong answer for files with PDF documents&quot;)),&#10;&#10;            //Zip archive&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[] {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;doc.zip&quot;, &quot;PCK&quot;)&#10;                .addFile(files + &quot;doc1.zip&quot;, &quot;PKC&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.zip: Unknown file type&quot; ,&#10;                    &quot;doc1.zip: Zip archive&quot;,&#10;                    &quot;Wrong answer for files with Zip archives&quot;)),&#10;&#10;            //PCP pmview config&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;main&quot;, &quot;pmview&quot;)&#10;                .addFile(files + &quot;main.config&quot;, &quot;pmconfigview&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;main: PCP pmview config&quot;,&#10;                    &quot;main.config: Unknown file type&quot;,&#10;                    &quot;Wrong answer for PCP pmview config files&quot;)),&#10;&#10;            //OpenDocument presentation&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;slides1.odp&quot;, &quot;vnd.oasis.opendocument.presentation&quot;)&#10;                .addFile(files + &quot;slides2.odp&quot;, &quot;vnd.oasis.microsoft.presentation&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;slides1.odp: OpenDocument presentation&quot;,&#10;                    &quot;slides2.odp: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //MS Office Word 2003&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;txt.doc&quot;, &quot;wwwwwwwwW.o.r.d&quot;)&#10;                .addFile(files + &quot;doc.txt&quot;, &quot;W.o.r.kwwwwwwww&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.txt: Unknown file type&quot;,&#10;                    &quot;txt.doc: MS Office Word 2003&quot;,&#10;                    &quot;Wrong answer for Word 2003 files&quot;)),&#10;&#10;            //MS Office PowerPoint 2003&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;slides1.ptp&quot;, &quot;P.o.w.e.r.P.o.i&quot;)&#10;                .addFile(files + &quot;slides2.ptp&quot;, &quot;P.o.w.e.r.\\Sh.o.i&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;slides1.ptp: MS Office PowerPoint 2003&quot;,&#10;                    &quot;slides2.ptp: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //MS Office Word 2007+&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;txt.doc&quot;, &quot;\\word/_rels&quot;)&#10;                .addFile(files + &quot;doc.txt&quot;, &quot;word/\\_rels&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;doc.txt: Unknown file type&quot;,&#10;                    &quot;txt.doc: MS Office Word 2007+&quot;,&#10;                    &quot;Wrong answer for Word 2007+ files&quot;)),&#10;&#10;            //MS Office PowerPoint 2007+&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;pres1.pptx&quot;, &quot;afeefa%ppt/_relsasdad&quot;)&#10;                .addFile(files + &quot;pres2.pptx&quot;, &quot;ppasfsfafdaet/_rels&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;pres1.pptx: MS Office PowerPoint 2007+&quot;,&#10;                    &quot;pres2.pptx: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //MS Office Excel 2007+&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;sheet1.xls&quot;, &quot;asdaxl/_rels&quot;)&#10;                .addFile(files + &quot;sheet2.xls&quot;, &quot;x2/_reasdadls&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;sheet1.xls: MS Office Excel 2007+&quot;,&#10;                    &quot;sheet2.xls: Unknown file type&quot;,&#10;                    &quot;Wrong answer for Excel 2007+ files&quot;)),&#10;&#10;            //PEM certificate&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;cert.pem&quot;, &quot;\\\\\\\\\\aasdw-----BEGIN\\ CERTIFICATE-----&quot;)&#10;                .addFile(files + &quot;cert_core.pem&quot;, &quot;\\\\\\\\\\adww-----BEGIN\\CERTIFICATE-----&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;cert.pem: PEM certificate&quot;,&#10;                    &quot;cert_core.pem: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //ISO Media JPEG 2000&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;1.jpg&quot;, &quot;ftypjp2ddddddaa&quot;)&#10;                .addFile(files + &quot;2.jpg&quot;, &quot;ftypdddjp2dadad&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;1.jpg: ISO Media JPEG 2000&quot;,&#10;                    &quot;2.jpg: Unknown file type&quot;,&#10;                    &quot;Wrong answer for ISO Media JPEG 2000 files&quot;)),&#10;&#10;            //ISO Media MP4 Base Media v2&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;tape.jpg&quot;, &quot;ftypiso2mp4&quot;)&#10;                .addFile(files + &quot;tape.mp4&quot;, &quot;mp4ffttypiso2&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;tape.jpg: ISO Media MP4 Base Media v2&quot;,&#10;                    &quot;tape.mp4: Unknown file type&quot;,&#10;                    &quot;&quot;)),&#10;&#10;            //Testing patterns priority&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;tape2.jpg&quot;, &quot;PK W.o.r.d&quot;)&#10;                .addFile(files + &quot;tape2.mp4&quot;, &quot;%PDF-mp4fftypiso2&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;tape2.jpg: MS Office Word 2003&quot;,&#10;                    &quot;tape2.mp4: ISO Media MP4 Base Media v2&quot;,&#10;                    &quot;Wrong answer white testing priority&quot;)),&#10;&#10;            new TestCase&lt;Clue&gt;()&#10;                .addArguments(new String[]&#10;                    {testFolder, patternsDb})&#10;                .addFile(patternsDb, patterns)&#10;                .addFile(files + &quot;tape3.jpg&quot;, &quot;-----BEGIN\\ CERTIFICATE-----pmview&quot;)&#10;                .addFile(files + &quot;tape3.mp4&quot;, &quot;%PDF-ftypppfW.o.r.dftypiso&quot;)&#10;                .setAttach(new Clue(&#10;                    &quot;tape3.jpg: PEM certificate&quot;,&#10;                    &quot;tape3.mp4: MS Office Word 2003&quot;,&#10;                    &quot;&quot;))&#10;        );&#10;    }&#10;&#10;    @Override&#10;    public CheckResult check(String reply, Clue clue) {&#10;        String actual = reply.strip();&#10;&#10;        if (!actual.contains(clue.first)) {&#10;            return CheckResult.FALSE(&#10;                clue.feedback + &quot;\n\n&quot; +&#10;                    &quot;Cannot find a line &quot; + clue.first + &quot;\nYour output:\n&quot; + actual&#10;            );&#10;        }&#10;&#10;        if (!actual.contains(clue.second)) {&#10;            return CheckResult.FALSE(&#10;                clue.feedback + &quot;\n\n&quot; +&#10;                    &quot;Cannot find a line &quot; + clue.second + &quot;\nYour output:\n&quot; + actual&#10;            );&#10;        }&#10;&#10;        return CheckResult.TRUE;&#10;    }&#10;&#10;    @BeforeClass&#10;    public static void generateTestFilesDirectory() {&#10;&#10;        deleteTestFilesDirectory();&#10;&#10;        try {&#10;            Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));&#10;        }&#10;        catch (IOException ex) {&#10;&#10;        }&#10;        try {&#10;            Files.createDirectory(Paths.get(CURRENT_DIR + testFolder));&#10;        }&#10;        catch (IOException ex) {&#10;&#10;        }&#10;    }&#10;&#10;&#10;    @AfterClass&#10;    public static void deleteTestFilesDirectory() {&#10;        try {&#10;            Files.deleteIfExists(Paths.get(CURRENT_DIR + testFolder));&#10;        }&#10;        catch (IOException ex) {&#10;&#10;&#10;        }&#10;    }&#10;&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="test/Clue.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="test/Clue.java" />
                                <option name="text" value="&#10;public class Clue {&#10;    public String first;&#10;    public String second;&#10;    public String feedback;&#10;&#10;    public Clue(String first, String second, String feedback) {&#10;        this.first = first;&#10;        this.second = second;&#10;        this.feedback = feedback;&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="false" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Main.java" />
                                <option name="text" value="package analyzer;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;Hello World!&quot;);&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/Worker.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/analyzer/Worker.java" />
                                <option name="text" value="package analyzer;&#10;&#10;class Worker extends Thread {&#10;    String arg0;&#10;    String arg1;&#10;    String arg2;&#10;    boolean result = false;&#10;&#10;    public Worker(String a0, String a1, String a2){&#10;        arg0=a0;&#10;        arg1=a1;&#10;        arg2=a2;&#10;    }&#10;&#10;&#10;    @Override&#10;    public void run() {&#10;        try {&#10;            result=Main.checkFileType(&quot;--KMP&quot;, arg0, arg1, arg2);&#10;        } catch (Exception ignored) {&#10;        }&#10;    }&#10;}&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/analyzer/patterns.db">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/analyzer/patterns.db" />
                                <option name="text" value="1;&quot;%PDF-&quot;;&quot;PDF document&quot;&#10;2;&quot;pmview&quot;;&quot;PCP pmview config&quot;&#10;4;&quot;PK&quot;;&quot;Zip archive&quot;&#10;5;&quot;vnd.oasis.opendocument.presentation&quot;;&quot;OpenDocument presentation&quot;&#10;6;&quot;W.o.r.d&quot;;&quot;MS Office Word 2003&quot;&#10;6;&quot;P.o.w.e.r.P.o.i&quot;;&quot;MS Office PowerPoint 2003&quot;&#10;7;&quot;word/_rels&quot;;&quot;MS Office Word 2007+&quot;&#10;7;&quot;ppt/_rels&quot;;&quot;MS Office PowerPoint 2007+&quot;&#10;7;&quot;xl/_rels&quot;;&quot;MS Office Excel 2007+&quot;&#10;8;&quot;-----BEGIN\ CERTIFICATE-----&quot;;&quot;PEM certificate&quot;&#10;9;&quot;ftypjp2&quot;;&quot;ISO Media JPEG 2000&quot;&#10;9;&quot;ftypiso2&quot;;&quot;ISO Media MP4 Base Media v2&quot;&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1561924034000" />
                    </EduTask>
                  </list>
                </option>
              </FrameworkLesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="0" />
                <option name="index" value="2" />
                <option name="name" value="Problems" />
                <option name="updateDate" value="0" />
                <option name="unitId" value="0" />
                <option name="items">
                  <list>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The first occurrence&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5716&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;The first occurrence&lt;/strong&gt;&lt;/h2&gt; &#10;  &lt;p&gt;Given two strings, a pattern and a text. Write a program that prints the first index in which the pattern occurs in the text, or -1 if there are no any occurrences.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: the empty string is a substring for any string.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;ACA&lt;br&gt;ACBACAD&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;banas&lt;br&gt;bananas&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;-1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5712&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5716" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5716" />
                      <option name="index" value="1" />
                      <option name="name" value="The first occurrence" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="Main.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562571859000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Non-overlapping occurrences&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5718&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Non-overlapping occurrences&lt;/strong&gt;&lt;/h2&gt; &#10;  &lt;p&gt;Let &lt;span class=&quot;math-tex&quot;&gt;\( i \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( j \)&lt;/span&gt; are starting and ending indexes of a substring &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt; in some string, &lt;span class=&quot;math-tex&quot;&gt;\( i^{\prime} \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( j^{\prime} \)&lt;/span&gt; are starting and ending indexes of a substring &lt;span class=&quot;math-tex&quot;&gt;\( s^{\prime} \)&lt;/span&gt; in the same string. &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( s^{\prime} \)&lt;/span&gt; are called non-overlapping if &lt;span class=&quot;math-tex&quot;&gt;\( i \le j \lt i^{\prime} \le j^{\prime} \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Given two strings, a pattern and a text. Write a program that finds all non-overlapping occurrences of the pattern in the text.&lt;/p&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; two strings, a pattern and a text, each is on a separate line.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;the first line should contain the number of non-overlapping occurrences of the pattern in the text. The second line should contain all indexes of such occurrences separated by space. For two overlapping substrings, consider as occurrence the one that has the least starting index.&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: the empty string is a substring for any string.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;aba&lt;br&gt;ababababab&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;0 4&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;acca&lt;br&gt;abacabad&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5712&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5718" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5718" />
                      <option name="index" value="2" />
                      <option name="name" value="Non-overlapping occurrences" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="Main.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562571860000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;All occurrences&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5717&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;All occurrences&lt;/strong&gt;&lt;/h2&gt; &#10;  &lt;p&gt;Given two strings, a pattern and a text. Write a program that counts the number of times the pattern occurs in the text and prints indexes of all occurrences.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Input: &lt;/strong&gt;two strings, a pattern and a text, each is on a separate line.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;the first line should contain the number of times the pattern occurs in the text. The second line should contain all indexes of occurrences separated by space.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: the empty string is a substring for any string.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;the&lt;br&gt;It was the best of times, it was the worst of times...&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;7 33&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Bob&lt;br&gt;Charles&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5712&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5717" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5717" />
                      <option name="index" value="3" />
                      <option name="name" value="All occurrences" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="Main.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562571859000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Number of distinct substrings in a string&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5730&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Number of distinct substrings in a string&lt;/h2&gt; &#10;  &lt;p&gt;Given a string &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt;. Write a program that counts the number of distinct substrings contained in &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;NB&lt;/strong&gt;: Remember about the empty string.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Hint&lt;/strong&gt;: Suppose we already know the number of distinct substrings for &lt;span class=&quot;math-tex&quot;&gt;\( s[(i+1)...|s|] \)&lt;/span&gt;. Now let's add a symbol &lt;span class=&quot;math-tex&quot;&gt;\( s[i] \)&lt;/span&gt; to the beginning of this substring. Thus, we add &lt;span class=&quot;math-tex&quot;&gt;\( \left| s[i..|s|] \right| \)&lt;/span&gt; new substrings. But how many of them did not appear before?&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;aba&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;6&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;x&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 3s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5725&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5730" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5730" />
                      <option name="index" value="4" />
                      <option name="name" value="Number of distinct substrings in a string" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="Main.java" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562571860000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Finding substrings in a matrix&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5731&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Finding substrings in a matrix&lt;/h2&gt; &#10;  &lt;p&gt;Given two matrices: a pattern &lt;span class=&quot;math-tex&quot;&gt;\( p \)&lt;/span&gt; and a text &lt;span class=&quot;math-tex&quot;&gt;\( t \)&lt;/span&gt;. Write a program that counts the number of occurrences of &lt;span class=&quot;math-tex&quot;&gt;\( p \)&lt;/span&gt; in &lt;span class=&quot;math-tex&quot;&gt;\( t \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; the first line contains two numbers &lt;span class=&quot;math-tex&quot;&gt;\( x \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( y \)&lt;/span&gt; -- the number of rows and columns in a pattern. Each of the next &lt;span class=&quot;math-tex&quot;&gt;\( x \)&lt;/span&gt; lines contains a string of length &lt;span class=&quot;math-tex&quot;&gt;\( y \)&lt;/span&gt;. The following lines contain a text in the same format. It is guaranteed that the sizes of rows and columns both for the pattern and for the text are not equal to zero.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;the number of occurrences of the pattern in the text.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Hint: &lt;/strong&gt;try to solve the problem when &lt;span class=&quot;math-tex&quot;&gt;\( p \)&lt;/span&gt; and &lt;span class=&quot;math-tex&quot;&gt;\( t \)&lt;/span&gt; have the same number of columns and then extend the solution for arbitrary strings.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 1&lt;br&gt;a&lt;br&gt;2 2&lt;br&gt;ab&lt;br&gt;ba&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2 2&lt;br&gt;aa&lt;br&gt;bb&lt;br&gt;4 4&lt;br&gt;aabb&lt;br&gt;bbaa&lt;br&gt;aabb&lt;br&gt;bbaa&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 2s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5725&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5731" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5731" />
                      <option name="index" value="5" />
                      <option name="name" value="Finding substrings in a matrix" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562571860000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Non-overlapping occurrences of a pattern&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5729&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;Non-overlapping occurrences of a pattern&lt;/h2&gt; &#10;  &lt;p&gt;Write a program that finds all non-overlapping occurrences of a pattern in a text.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; two strings, a pattern &lt;span class=&quot;math-tex&quot;&gt;\( p \)&lt;/span&gt; and a text &lt;span class=&quot;math-tex&quot;&gt;\( t \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Output: &lt;/strong&gt;﻿the first line should contain the number of non-overlapping occurrences of the pattern in the text. The second line should contain the index of these occurrences separated by space.&lt;/p&gt; &#10;  &lt;p&gt;For two overlapping substrings, consider as occurrence the one that has the least starting index. (it is supposed that a searching starts from the beginning of the text).&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;aba&lt;br&gt;ababababa&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;0 4&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;aba&lt;br&gt;abacabad&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;0 4&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 3s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5725&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5729" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5729" />
                      <option name="index" value="6" />
                      <option name="name" value="Non-overlapping occurrences of a pattern" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562571860000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Publications&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/4334&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;   Given four classes - Publication, Newspaper, Article, Announcement. You need to override method getDetails() in classes inherited from class Publication. This classes should use Publication`s getDetails() to get information about the title and append their own information. &#10;  &lt;div&gt;&#10;   Examples are shown below.&#10;   &lt;span&gt;&lt;/span&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Publication; The new era&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;title=&quot;The new era&quot;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Newspaper; Football results; Sport news&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;title=&quot;Football results&quot;, source=&quot;Sport news&quot;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Article; Why the Sun is hot; Dr James Smith&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;title=&quot;Why the Sun is hot&quot;, author=&quot;Dr James Smith&quot;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Announcement; Will sell a house; 30&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;title=&quot;Will sell a house&quot;, daysToExpire=30&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3588&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/4334" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="4334" />
                      <option name="index" value="7" />
                      <option name="name" value="Publications" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Publication {&#10;&#10;    private String title;&#10;&#10;    public Publication(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getDetails() {&#10;        return &quot;title=\&quot;&quot; + title + &quot;\&quot;&quot;;&#10;    }&#10;&#10;}&#10;&#10;class Newspaper extends Publication {&#10;&#10;    private String source;&#10;&#10;    public Newspaper(String title, String source) {&#10;        super(title);&#10;        this.source = source;&#10;    }&#10;&#10;    // write your code here&#10;&#10;}&#10;&#10;class Article extends Publication {&#10;&#10;    private String author;&#10;&#10;    public Article(String title, String author) {&#10;        super(title);&#10;        this.author = author;&#10;    }&#10;&#10;    // write your code here&#10;&#10;}&#10;&#10;class Announcement extends Publication {&#10;&#10;    private int daysToExpire;&#10;&#10;    public Announcement(String title, int daysToExpire) {&#10;        super(title);&#10;        this.daysToExpire = daysToExpire;&#10;    }&#10;&#10;    // write your code here&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088501000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Saying animals&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2200&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;You have four classes: Animal, Cat, Dog, &lt;/span&gt;and&lt;span&gt; Duck. &lt;/span&gt;&lt;span&gt;The class animal has a method say(). The method does nothing.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Override the method in all subclasses. &lt;span&gt;Overridden methods should output what these animals say (using System.out.println).&lt;/span&gt;&lt;/p&gt;&#10;  &lt;p&gt;Cat:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;meow-meow&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Dog:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;arf-arf&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;Duck:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;quack-quack&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3572&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2200" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2200" />
                      <option name="index" value="8" />
                      <option name="name" value="Saying animals" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Animal {&#10;&#10;    public void say() {}&#10;}&#10;&#10;class Cat extends Animal {&#10;&#10;}&#10;&#10;class Dog extends Animal {&#10;&#10;}&#10;&#10;class Duck extends Animal {&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088425000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Shapes area&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3823&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  You have five classes: Shape, Triangle, Circle, Square, and Rectangle. The class Shape has a method area(). The method does nothing. Override the method in all subclasses. Overridden methods should return an area of a shape. Use class fields for this.&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The area of a triangle is &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( S = bh / 2 \)&lt;/span&gt; where &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( h \)&lt;/span&gt; - height of a triangle, &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( b \)&lt;/span&gt; - a base of a triangle.&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The area of a circle is &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( S = \pi R^2 \)&lt;/span&gt; where &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( R \)&lt;/span&gt; - radius of a circle. For &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( \pi \)&lt;/span&gt; use &#10;   &lt;code class=&quot;java&quot;&gt;Math.PI&lt;/code&gt; constant.&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The area of a square is &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( S = s^2 \)&lt;/span&gt; where &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt; - a length of one side of a triangle.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The area of a rectangle is &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( S = wh \)&lt;/span&gt; where &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( w \)&lt;/span&gt; - width of a rectangle and &#10;   &lt;span class=&quot;math-tex&quot;&gt;\( h \)&lt;/span&gt; - height of a rectangle.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3572&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3823" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3823" />
                      <option name="index" value="9" />
                      <option name="name" value="Shapes area" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.lang.Math;&#10;&#10;class Shape {&#10;&#10;    public double area() {&#10;        return 0;&#10;    }&#10;}&#10;&#10;class Triangle extends Shape {&#10;    double height, base;&#10;&#10;}&#10;&#10;class Circle extends Shape {&#10;    double radius;&#10;&#10;}&#10;&#10;class Square extends Shape {&#10;    double side;&#10;&#10;}&#10;&#10;class Rectangle extends Shape {&#10;    double width, height;&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088499000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Publication and its subclasses&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/4331&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given four classes - Publication, Newspaper, Article, Announcement. You need to override methods getType() and getDetails() in classes inherited from class Publication. Then you need to implement getInfo() in class Publication with a usage of getType() and getDetails(). The method should return a String with a type of publication on the first place, then details in round brackets and a title after a colon. Examples are shown below.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Publication; The new era&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Publication: The new era&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Newspaper; Football results; Sport news&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Newspaper (source - Sport news): Football results&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Article; Why the Sun is hot; Dr James Smith&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Article (author - Dr James Smith): Why the Sun is hot&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Announcement; Will sell a house; 30&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Announcement (days to expire - 30): Will sell a house&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3587&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/4331" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="4331" />
                      <option name="index" value="10" />
                      <option name="name" value="Publication and its subclasses" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Publication {&#10;&#10;    private String title;&#10;&#10;    public Publication(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public final String getInfo() {&#10;        // write your code here&#10;    }&#10;&#10;    public String getType() {&#10;        return &quot;Publication&quot;;&#10;    }&#10;&#10;    public String getDetails() {&#10;        return &quot;&quot;;&#10;    }&#10;&#10;}&#10;&#10;class Newspaper extends Publication {&#10;&#10;    private String source;&#10;&#10;    public Newspaper(String title, String source) {&#10;        super(title);&#10;        this.source = source;&#10;    }&#10;&#10;    // write your code here&#10;&#10;}&#10;&#10;class Article extends Publication {&#10;&#10;    private String author;&#10;&#10;    public Article(String title, String author) {&#10;        super(title);&#10;        this.author = author;&#10;    }&#10;&#10;    // write your code here&#10;&#10;}&#10;&#10;class Announcement extends Publication {&#10;&#10;    private int daysToExpire;&#10;&#10;    public Announcement(String title, int daysToExpire) {&#10;        super(title);&#10;        this.daysToExpire = daysToExpire;&#10;    }&#10;&#10;    // write your code here&#10;&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088501000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Find mistake&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3661&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;You decide to create your own project, so you need to employ&amp;nbsp;1 &lt;strong&gt;programmer&lt;/strong&gt; and 1 &lt;strong&gt;team lead&lt;/strong&gt;. You have written code for that, but it does not work.&lt;/p&gt; &#10;  &lt;p&gt;Your task is to find a mistake.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: don't rename methods or create your own classes and don't create new objects.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Advice&lt;/strong&gt;: what methods can be inherited?&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;Time to code&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1 teamlead&lt;br&gt;1 programmer&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3587&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3661" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3661" />
                      <option name="index" value="11" />
                      <option name="name" value="Find mistake" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Test {&#10;        public static void main(String[] args) {&#10;            new Programmer(1);&#10;        }&#10;&#10;        public static class TeamLead {&#10;            private int numTeamLead;&#10;&#10;            public TeamLead(int numTeamLead) {&#10;                this.numTeamLead = numTeamLead;&#10;                employ();&#10;            }&#10;&#10;            protected void employ() {&#10;                System.out.println(numTeamLead + &quot; teamlead&quot;);&#10;            }&#10;&#10;        }&#10;&#10;        public static class Programmer extends TeamLead {&#10;            private int numProgrammer;&#10;&#10;            public Programmer(int numProgrammer) {&#10;                super(numProgrammer);&#10;                this.numProgrammer = numProgrammer;&#10;                employ();&#10;&#10;            }&#10;&#10;            protected void employ() {&#10;                System.out.println(numProgrammer + &quot; programmer&quot;);&#10;            }&#10;        }&#10;    }" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1554404024000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Mutable geometric shapes&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3083&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Suppose, you write a geometric engine. Now it includes classes and interfaces &lt;code&gt;Circle&lt;/code&gt;, &lt;code&gt;Rectangle&lt;/code&gt;, &lt;code&gt;Moveable&lt;/code&gt; and &lt;code&gt;Scalable&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;You need:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;ol&gt; &#10;   &lt;li&gt;to write a new interface &lt;code&gt;MutableShape&lt;/code&gt; that extends both existing interfaces;&lt;/li&gt; &#10;   &lt;li&gt;to implement the new interface by each class;&lt;/li&gt; &#10;   &lt;li&gt;to override methods &lt;code&gt;move&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; in both classes: &#10;    &lt;ul&gt; &#10;     &lt;li&gt;&lt;code&gt;scale&lt;/code&gt; should multiply the &lt;code&gt;radius&lt;/code&gt; of a circle by the specified &lt;code&gt;factor&lt;/code&gt;;&lt;/li&gt; &#10;     &lt;li&gt;&lt;code&gt;scale&lt;/code&gt; should multiple &lt;code&gt;width&lt;/code&gt;&amp;nbsp;and &lt;code&gt;height&lt;/code&gt; of a rectangle by the specified &lt;code&gt;factor&lt;/code&gt;;&lt;/li&gt; &#10;     &lt;li&gt;&lt;code&gt;move&lt;/code&gt; should add &lt;code&gt;dx&lt;/code&gt; and &lt;code&gt;dy&lt;/code&gt; to the centre of a circle;&lt;/li&gt; &#10;     &lt;li&gt;&lt;code&gt;move&lt;/code&gt; should add &lt;code&gt;dx&lt;/code&gt; and &lt;code&gt;dy&lt;/code&gt; to the upper-left corner of a rectangle.&lt;/li&gt; &#10;    &lt;/ul&gt; &lt;/li&gt; &#10;  &lt;/ol&gt; &#10;  &lt;p&gt;See the provided code and read comments to understand your task better. Now the code is not compiled.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;do not remove existing classes and their members (including getters and constructors).&lt;/li&gt; &#10;   &lt;li&gt;do not make your classes and interfaces &lt;code&gt;public&lt;/code&gt;.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;After your changes, the following code should be compiled:&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;MutableShape circle = new Circle(2.0f, 3.5f, 10.1f);&#10;circle.move(10.1f, 20.2f);&#10;circle.scale(2.2f);&#10;((Circle) circle).getRadius();&lt;/code&gt;&lt;/pre&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3615&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3083" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3083" />
                      <option name="index" value="12" />
                      <option name="name" value="Mutable geometric shapes" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="interface Moveable {&#10;&#10;    void move(float dx, float dy);&#10;}&#10;&#10;interface Scalable {&#10;&#10;    void scale(float factor);&#10;}&#10;&#10;final class Circle {&#10;&#10;    /**&#10;     * Defines the horizontal position of the center of the circle.&#10;     */&#10;    private float centerX;&#10;&#10;    /**&#10;     * Defines the radius of the circle&#10;     */&#10;    private float centerY;&#10;&#10;    /**&#10;     * Defines the radius of the circle&#10;     */&#10;    private float radius;&#10;&#10;    public Circle(float centerX, float centerY, float radius) {&#10;        this.centerX = centerX;&#10;        this.centerY = centerY;&#10;        this.radius = radius;&#10;    }&#10;&#10;    public float getCenterX() {&#10;        return centerX;&#10;    }&#10;&#10;    public float getCenterY() {&#10;        return centerY;&#10;    }&#10;&#10;    public float getRadius() {&#10;        return radius;&#10;    }&#10;}&#10;&#10;final class Rectangle {&#10;&#10;    /**&#10;     * Defines the X coordinate of the upper-left corner of the rectangle.&#10;     */&#10;    private float x;&#10;&#10;    /**&#10;     * Defines the Y coordinate of the upper-left corner of the rectangle.&#10;     */&#10;    private float y;&#10;&#10;    /**&#10;     * Defines the width of the rectangle.&#10;     */&#10;    private float width;&#10;&#10;    /**&#10;     * Defines the height of the rectangle.&#10;     */&#10;    private float height;&#10;&#10;    public Rectangle(float x, float y, float w, float h) {&#10;        this.x = x;&#10;        this.y = y;&#10;        this.width = w;&#10;        this.height = h;&#10;    }&#10;&#10;    public float getX() {&#10;        return x;&#10;    }&#10;&#10;    public float getY() {&#10;        return y;&#10;    }&#10;&#10;    public float getWidth() {&#10;        return width;&#10;    }&#10;&#10;    public float getHeight() {&#10;        return height;&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1552983456000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Account Service&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2121&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given an interface named &lt;code&gt;AccountService&lt;/code&gt;. The interface has two abstract methods:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;code&gt;findAccountByOwnerId(long id)&lt;/code&gt; returns &lt;code&gt;Account&lt;/code&gt; found by owner id or &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt; &#10;   &lt;li&gt;&lt;code&gt;countAccountsWithBalanceGreaterThan(long balance)&lt;/code&gt; returns number of accounts with the balance greater than the passed value.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Also there are two other classes: &lt;code&gt;Account&lt;/code&gt; (id, balance, owner) and &lt;code&gt;User&lt;/code&gt; (id, firstName, lastName). See the provided code template.&lt;/p&gt; &#10;  &lt;p&gt;You need to implement the &lt;code&gt;AccountService&lt;/code&gt; interface and its two methods. Your implementation must be named &lt;code&gt;AccountServiceImpl&lt;/code&gt;. It should have a constructor with one argument - an array of accounts. The implementation must keep the array inside. The first method should search an account by owner id in the array, the second one - count number of accounts by condition in the array.&lt;/p&gt; &#10;  &lt;p&gt;An example of creating an instance:&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Account[] accounts = ...&#10;AccountService service = new AccountServiceImpl(accounts);&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt;Do not make classes and the interface &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3615&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2121" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2121" />
                      <option name="index" value="13" />
                      <option name="name" value="Account Service" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="interface AccountService {&#10;    /**&#10;     * It finds an account by owner id&#10;     * @param id owner unique identifier&#10;     * @return account or null&#10;     */&#10;    Account findAccountByOwnerId(long id);&#10;    /**&#10;     * It count the number of account with balance &gt; the given value&#10;     * @param value&#10;     * @return the number of accounts&#10;     */&#10;    long countAccountsWithBalanceGreaterThan(long value);&#10;}&#10;&#10;// Declare and implement your AccountServiceImpl here&#10;&#10;class Account {&#10;&#10;    private long id;&#10;    private long balance;&#10;    private User owner;&#10;&#10;    public Account(long id, long balance, User owner) {&#10;        this.id = id;&#10;        this.balance = balance;&#10;        this.owner = owner;&#10;    }&#10;&#10;    public long getId() { return id; }&#10;&#10;    public long getBalance() { return balance; }&#10;&#10;    public User getOwner() { return owner; }&#10;}&#10;&#10;class User {&#10;&#10;    private long id;&#10;    private String firstName;&#10;    private String lastName;&#10;&#10;    public User(long id, String firstName, String lastName) {&#10;        this.id = id;&#10;        this.firstName = firstName;&#10;        this.lastName = lastName;&#10;    }&#10;&#10;    public long getId() { return id; }&#10;&#10;    public String getFirstName() { return firstName; }&#10;&#10;    public String getLastName() { return lastName; }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1559158140000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Compact strings with AsciiCharSequence&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3082&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Write a class named &#10;  &lt;code class=&quot;java&quot;&gt;AsciiCharSequence&lt;/code&gt; that implements compact storage ASCII-character sequences. Their codes can be stored in one single byte, unlike Unicode characters.&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   In comparison with the standard &#10;   &lt;code class=&quot;java&quot;&gt;String&lt;/code&gt; class, your class will require twice less memory (before Java 9).&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The class &#10;   &lt;code class=&quot;java&quot;&gt;AsciiCharSequence&lt;/code&gt; must:&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;ul&gt;&#10;    &lt;li&gt;implement the interface &lt;code class=&quot;java&quot;&gt;java.lang.CharSequence&lt;/code&gt;;&lt;br&gt;&lt;/li&gt;&#10;    &lt;li&gt;have a constructor that takes a byte array;&lt;br&gt;&lt;/li&gt;&#10;    &lt;li&gt;define methods &lt;code class=&quot;java&quot;&gt;length&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;charAt&lt;/code&gt;, &lt;code class=&quot;java&quot;&gt;subSequence&lt;/code&gt;, and &lt;code class=&quot;java&quot;&gt;toString&lt;/code&gt;.&lt;/li&gt;&#10;   &lt;/ul&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;p&gt;The declaration of methods and their behaviour see in the desription of &lt;code class=&quot;java&quot;&gt;java.lang.CharSequence&lt;/code&gt; (JavaDoc or sources).&lt;/p&gt;&#10;   &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; the testing system, will always pass correct input parameters to overridden methods.&lt;/p&gt;&#10;   &lt;p&gt;P.S. The feature is supported since Java 9 in standard strings. For details, see: &lt;a href=&quot;http://www.baeldung.com/java-9-compact-string&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://www.baeldung.com/java-9-compact-string&lt;/a&gt;&lt;/p&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3615&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3082" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3082" />
                      <option name="index" value="14" />
                      <option name="name" value="Compact strings with AsciiCharSequence" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/AsciiCharSequence.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/AsciiCharSequence.java" />
                                <option name="text" value="public class AsciiCharSequence /* extends/implements */ {&#10;    // implementation&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088483000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Max and Min&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3331&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Use the strategy pattern to implement algorithms to find max and min values in a given array. The basic structure of the provided classes is described below: your job is to complete it.&lt;/p&gt; &#10;  &lt;p&gt;The class &lt;code&gt;Finder&lt;/code&gt; represents the general finding algorithm itself. It works according to the specified strategy.&lt;/p&gt; &#10;  &lt;p&gt;The interface &lt;code&gt;FindingStrategy&lt;/code&gt; provides two methods to write new concrete finding strategies: &lt;code&gt;takeOne&lt;/code&gt; to get the next value and &lt;code&gt;getDefaultValue&lt;/code&gt; to return a value if nothing was found (the given array is empty). Strategies define only the specific details of the finding algorithm.&lt;/p&gt; &#10;  &lt;p&gt;Please, do not change the interface &lt;code&gt;FindingStrategy&lt;/code&gt;, and do not rename the existing methods.&lt;/p&gt; &#10;  &lt;p&gt;If the array is empty, the &lt;code&gt;Finder&lt;/code&gt; should return &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; in case of finding the min value and &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; in case of finding the max value.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;HINT: &lt;/strong&gt;tests 1-5 check &lt;code&gt;MinFindingStrategy&lt;/code&gt;, tests 6-10 check &lt;code&gt;MaxFindingStrategy&lt;/code&gt;. Do not forget to check your solution when the passed array has the size 0 or 1.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3556&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3331" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3331" />
                      <option name="index" value="15" />
                      <option name="name" value="Max and Min" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class Finder {&#10;&#10;    private FindingStrategy strategy;&#10;&#10;    public Finder(FindingStrategy strategy) {&#10;        // write your code here&#10;    }&#10;&#10;    /**&#10;     * It performs the search algorithm according to the given strategy&#10;     */&#10;    public int find(int[] numbers) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;interface FindingStrategy {&#10;&#10;    /**&#10;     * Returns one of two values&#10;     */&#10;    int takeOne(int elem1, int elem2);&#10;&#10;    /**&#10;     * Returns the default value of a concrete implementation&#10;     */&#10;    int getDefaultValue();&#10;}&#10;&#10;class MaxFindingStrategy implements FindingStrategy {&#10;&#10;    public int takeOne(int elem1, int elem2) {&#10;        // write your code here&#10;    }&#10;&#10;    public int getDefaultValue() {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;class MinFindingStrategy implements FindingStrategy {&#10;&#10;    public int takeOne(int elem1, int elem2) {&#10;        // write your code here&#10;    }&#10;&#10;    public int getDefaultValue() {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;public class Main {&#10;&#10;    public static void main(String args[]) {&#10;&#10;        final Scanner scanner = new Scanner(System.in);&#10;&#10;        final String[] elements = scanner.nextLine().split(&quot;\\s+&quot;);&#10;        int[] numbers = null;&#10;&#10;        if (!elements[0].equals(&quot;EMPTY&quot;)) {&#10;            numbers = new int[elements.length];&#10;            for (int i = 0; i &lt; elements.length; i++) {&#10;                numbers[i] = Integer.parseInt(elements[i]);&#10;            }&#10;        } else {&#10;            numbers = new int[0];&#10;        }&#10;&#10;        final String type = scanner.nextLine();&#10;&#10;        Finder finder = null;&#10;&#10;        switch (type) {&#10;            case &quot;MIN&quot;:&#10;                finder = new Finder(new MinFindingStrategy());&#10;                break;&#10;            case &quot;MAX&quot;:&#10;                finder = new Finder(new MaxFindingStrategy());&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;&#10;        if (finder == null) {&#10;            throw new RuntimeException(&#10;                    &quot;Unknown strategy type passed. Please, write to the author of the problem.&quot;);&#10;        }&#10;&#10;        System.out.println(finder.find(numbers));&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562802825000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Pick your team&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3329&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Imagine that you're creating&amp;nbsp;teams to organize events. You need a module for your program that will select the people&amp;nbsp;for these teams.&lt;/p&gt; &#10;  &lt;p&gt;There are only two selection algorithms:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;take every k-th person;&lt;/li&gt; &#10;   &lt;li&gt;take the last k people.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;In both cases, k &amp;gt; 1.&lt;/p&gt; &#10;  &lt;p&gt;You decided to use the &lt;strong&gt;strategy pattern&lt;/strong&gt; in the module because new selection algorithms will be added in the future. Also, the pattern allows you to change the current algorithm at runtime.&lt;/p&gt; &#10;  &lt;p&gt;The basic structure of classes is provided below, but it doesn't really work properly.&lt;/p&gt; &#10;  &lt;p&gt;Your goal is to implement the following method:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;code&gt;setAlgorithm&lt;/code&gt; and &lt;code&gt;selectPersons&lt;/code&gt; methods of the class &lt;code&gt;SelectionContext&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;&lt;code&gt;select&lt;/code&gt; of the class &lt;code&gt;TakePersonsWithStepAlgorithm&lt;/code&gt; to take every k-th person &lt;strong&gt;starting with the index 0&lt;/strong&gt; in the same order as in the input array (when k is 3, then it must take 0, 3, 6, ... persons);&lt;/li&gt; &#10;   &lt;li&gt;&lt;code&gt;select&lt;/code&gt; of the class &lt;code&gt;TakeLastPersonsAlgorithm&lt;/code&gt; to take the last k persons in the same order as the input array.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;Perhaps, you should add some fields to the classes as well.&lt;/p&gt; &#10;  &lt;p&gt;Please&amp;nbsp;do not change the class &lt;code&gt;Person&lt;/code&gt; and the interface &lt;code&gt;PersonSelectionAlgorithm&lt;/code&gt;, and do not rename existing methods.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;HINT: &lt;/strong&gt;tests 1-4 check &lt;code&gt;TakePersonsWithStepAlgorithm&lt;/code&gt;, tests 5-8 check &lt;code&gt;TakeLastPersonsAlgorithm&lt;/code&gt;. Do not forget to check your solution when the step is 1 or the input array contains only a single element.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3556&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3329" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3329" />
                      <option name="index" value="16" />
                      <option name="name" value="Pick your team" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class SelectionContext {&#10;&#10;    private PersonSelectionAlgorithm algorithm;&#10;&#10;    public void setAlgorithm(PersonSelectionAlgorithm algorithm) {&#10;        // write your code here&#10;    }&#10;&#10;    public Person[] selectPersons(Person[] persons) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;interface PersonSelectionAlgorithm {&#10;&#10;    Person[] select(Person[] persons);&#10;}&#10;&#10;class TakePersonsWithStepAlgorithm implements PersonSelectionAlgorithm {&#10;&#10;    public TakePersonsWithStepAlgorithm(int step) {&#10;        // write your code here&#10;    }&#10;&#10;    @Override&#10;    public Person[] select(Person[] persons) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;&#10;class TakeLastPersonsAlgorithm implements PersonSelectionAlgorithm {&#10;&#10;    public TakeLastPersonsAlgorithm(int count) {&#10;        // write your code here&#10;    }&#10;&#10;    @Override&#10;    public Person[] select(Person[] persons) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;class Person {&#10;&#10;    String name;&#10;&#10;    public Person(String name) {&#10;        this.name = name;&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;public class Main {&#10;&#10;    public static void main(String args[]) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;&#10;        final int count = Integer.parseInt(scanner.nextLine());&#10;        final Person[] persons = new Person[count];&#10;&#10;        for (int i = 0; i &lt; count; i++) {&#10;            persons[i] = new Person(scanner.nextLine());&#10;        }&#10;&#10;        final String[] configs = scanner.nextLine().split(&quot;\\s+&quot;);&#10;&#10;        final PersonSelectionAlgorithm alg = create(configs[0], Integer.parseInt(configs[1]));&#10;        SelectionContext ctx = new SelectionContext();&#10;        ctx.setAlgorithm(alg);&#10;&#10;        final Person[] selected = ctx.selectPersons(persons);&#10;        for (Person p : selected) {&#10;            System.out.println(p.name);&#10;        }&#10;    }&#10;&#10;    public static PersonSelectionAlgorithm create(String algType, int param) {&#10;        switch (algType) {&#10;            case &quot;STEP&quot;: {&#10;                return new TakePersonsWithStepAlgorithm(param);&#10;            }&#10;            case &quot;LAST&quot;: {&#10;                return new TakeLastPersonsAlgorithm(param);&#10;            }&#10;            default: {&#10;                throw new IllegalArgumentException(&quot;Unknown algorithm type &quot; + algType);&#10;            }&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562765884000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;IntBinaryOperation&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3078&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Given an abstract class &lt;code class=&quot;java&quot;&gt;IntBinaryOperation&lt;/code&gt;. It has one abstract method &lt;code class=&quot;java&quot;&gt;perform&lt;/code&gt; and two fields representing the operation arguments. The fields are initialized in the constructor. See the provided code template.&lt;/p&gt;&#10;  &lt;p&gt;You need to declare and implement two classes representing concrete operations: &lt;code class=&quot;java&quot;&gt;Addition&lt;/code&gt; and &lt;code class=&quot;java&quot;&gt;Multiplication&lt;/code&gt;. The classes must extend the abstract class and implement the method &lt;code class=&quot;java&quot;&gt;perform&lt;/code&gt;. The implementation should work in accordance with the class name. Do not forget to write two-argument constructors in your classes.&lt;/p&gt;&#10;  &lt;p&gt;Do not make your classes &lt;code class=&quot;java&quot;&gt;public&lt;/code&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3597&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3078" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3078" />
                      <option name="index" value="17" />
                      <option name="name" value="IntBinaryOperation" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="abstract class IntBinaryOperation {&#10;&#10;    protected int firstArg;&#10;    protected int secondArg;&#10;&#10;    public IntBinaryOperation(int firstArg, int secondArg) {&#10;        this.firstArg = firstArg;&#10;        this.secondArg = secondArg;&#10;    }&#10;&#10;    public abstract int perform();&#10;}&#10;&#10;// declare and implement your classes here" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088482000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Shape hierarchy&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2120&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;You have the abstract class &lt;/span&gt;&lt;b&gt;Shape&lt;/b&gt;&lt;span&gt; with two abstract methods: getPerimeter() and getArea(). See the provided code template.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;You need to declare and implement three classes: &lt;b&gt;Triangle&lt;/b&gt;, &lt;b&gt;Rectangle&lt;/b&gt; and &lt;b&gt;Circle&lt;/b&gt;. The classes must extend the Shape class and implement all abstract methods. To implement the methods the standard class Math may help you. Do not make your classes public.&lt;/p&gt;&#10;  &lt;p&gt;The class Triangle must have a constructor with three double arguments for setting the length of each side. To calculate the area of this shape you may use the Heron's formula.&lt;/p&gt;&#10;  &lt;p&gt;The class Rectangle must have a constructor with two double arguments for setting the length of different sides.&lt;/p&gt;&#10;  &lt;p&gt;The class Circle must have a constructor with one double argument for setting the radius. You may use Math.PI as the PI constant or declare it yourself.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Examples&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;A circle has a radius = 10: perimeter = 62.831853..., area = 314.159265....&lt;/p&gt;&#10;  &lt;p&gt;A triangle has three sides a = 3, b = 4 and c = 5: perimeter = 12.0, area = 6.0.&lt;/p&gt;&#10;  &lt;p&gt;A rectangle has two different sides a = 5, b = 10: perimeter = 30.0, area = 50.0.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3597&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2120" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2120" />
                      <option name="index" value="18" />
                      <option name="name" value="Shape hierarchy" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="abstract class Shape {&#10;&#10;    abstract double getPerimeter();&#10;&#10;    abstract double getArea();&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088425000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Users and WebSites&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3080&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  You write the application which collects information what sites were visited by what users.&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   There are three classes: &#10;   &lt;code class=&quot;java&quot;&gt;User&lt;/code&gt;, &#10;   &lt;code class=&quot;java&quot;&gt;WebSite&lt;/code&gt; and &#10;   &lt;code class=&quot;java&quot;&gt;Visit&lt;/code&gt;. The classes have a lot of the same fields and methods.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Write a new base &#10;   &lt;b&gt;abstract&lt;/b&gt; class named &#10;   &lt;code class=&quot;java&quot;&gt;BaseEntity&lt;/code&gt;. Provided classes must extend it. Move all repeating fields and methods to the new class.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   After your modifications, the following code must work correctly:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;User user = new User();&#10;user.setName(&quot;John Grant&quot;);&#10;BaseEntity userEntity = user;&#10;userEntity.setId(100);&#10;userEntity.setVersion(1);&#10;WebSite site = new WebSite();&#10;site.setUrl(&quot;https://hyperskill﻿.org&quot;);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;BaseEntity siteEntity = site;&#10;siteEntity.setId(101);&#10;siteEntity.setVersion(1);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;Visit visit = new Visit();&#10;visit.setUser(user);&#10;visit.setSite(site);&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &#10;BaseEntity baseVisit = visit;&#10;baseVisit.setId(102);&#10;baseVisit.setVersion(103);﻿&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3597&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3080" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3080" />
                      <option name="index" value="19" />
                      <option name="name" value="Users and WebSites" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class User {&#10;&#10;    protected long id;&#10;&#10;    protected long version;&#10;&#10;    protected String name;&#10;&#10;    public long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public long getVersion() {&#10;        return version;&#10;    }&#10;&#10;    public void setVersion(long version) {&#10;        this.version = version;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(String name) {&#10;        this.name = name;&#10;    }&#10;}&#10;&#10;class Visit {&#10;&#10;    protected long id;&#10;&#10;    protected long version;&#10;&#10;    protected User user;&#10;&#10;    protected WebSite site;&#10;&#10;    public long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public long getVersion() {&#10;        return version;&#10;    }&#10;&#10;    public void setVersion(long version) {&#10;        this.version = version;&#10;    }&#10;&#10;    public User getUser() {&#10;        return user;&#10;    }&#10;&#10;    public void setUser(User user) {&#10;        this.user = user;&#10;    }&#10;&#10;    public WebSite getSite() {&#10;        return site;&#10;    }&#10;&#10;    public void setSite(WebSite site) {&#10;        this.site = site;&#10;    }&#10;}&#10;&#10;class WebSite {&#10;&#10;    protected long id;&#10;&#10;    protected long version;&#10;&#10;    protected String url;&#10;&#10;    public long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public long getVersion() {&#10;        return version;&#10;    }&#10;&#10;    public void setVersion(long version) {&#10;        this.version = version;&#10;    }&#10;&#10;    public String getUrl() {&#10;        return url;&#10;    }&#10;&#10;    public void setUrl(String url) {&#10;        this.url = url;&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088483000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Iterations&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2551&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;There are two static methods:&lt;/span&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;&lt;br&gt;&lt;/span&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;1) static void performIterationsWithCallback(int numberOfIterations, LoopCallback callback)&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;2) static void startIterations(int numberOfIterations)&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   The first method takes a number of iterations for a loop and a callback that is called on each iteration. The second method takes a number of iterations, creates a callback and pass them to the first method.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    The &#10;    &lt;b&gt;Callback&lt;/b&gt; interface with a single method:&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface LoopCallback {&#10;&amp;nbsp; &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; void onNewIteration(int iteration);&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    You should implement the second method. It must create an instance of an anonymous class that implements &#10;    &lt;b&gt;LoopCallback&lt;/b&gt; and pass it to the first method. The overridden method &#10;    &lt;b&gt;onNewIteration&lt;/b&gt; should output the number of iteration to the standard output in a new line. For example:&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Iteration: 0&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    Use the provided code template.&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3564&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2551" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2551" />
                      <option name="index" value="20" />
                      <option name="name" value="Iterations" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="static void performIterationsWithCallback(int numberOfIterations, LoopCallback callback) {&#10;    for (int i = 0; i &lt; numberOfIterations; i++) {&#10;        callback.onNewIteration(i);&#10;    }&#10;}&#10;&#10;static void startIterations(int numberOfIterations) {&#10;    // invoke the method performIterationsWithCallback here&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088458000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Getting current thread info&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2521&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;&lt;span&gt;Implement a method that prints the information about the thread executing this method. The information includes the thread's name and its priority.&lt;/span&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;Here is the output example:&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;name: my-thread&#10;priority: 5&lt;/code&gt;&lt;/pre&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/4875&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2521" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2521" />
                      <option name="index" value="21" />
                      <option name="name" value="Getting current thread info" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public static void printCurrentThreadInfo() {&#10;    // get the thread and print its info&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088455000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Writing a thread for printing numbers&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2525&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;Write a class with the name &lt;/span&gt;&#10;   &lt;b&gt;NumbersThread&lt;/b&gt;&#10;   &lt;span&gt; that extends the &lt;/span&gt;&#10;   &lt;b&gt;Thread &lt;/b&gt;&#10;   &lt;span&gt;class&lt;/span&gt;&#10;   &lt;b&gt;&lt;/b&gt;&#10;   &lt;span&gt;. The class must have a constructor that takes two integer numbers &lt;/span&gt;&#10;   &lt;b&gt;from &lt;/b&gt;&#10;   &lt;span&gt;and &lt;/span&gt;&#10;   &lt;b&gt;to&lt;/b&gt;&#10;   &lt;span&gt; - range borders&lt;/span&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Implement the method &#10;   &lt;b&gt;run. &lt;/b&gt;It must print all numbers from the given range (inclusive) to the standard output.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   Use the provided template.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 3&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;2 2&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/4876&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2525" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2525" />
                      <option name="index" value="22" />
                      <option name="name" value="Writing a thread for printing numbers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class NumbersThread extends Thread {&#10;&#10;    public NumbersThread(int from, int to) {&#10;        // implement the constructor&#10;    }&#10;&#10;    // you should override some method here                                                   &#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088455000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Starting multiple threads - 1&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2519&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;Given a class that extends the &lt;/span&gt;&#10;   &lt;b&gt;Thread&lt;/b&gt;&#10;   &lt;span&gt; class.&lt;/span&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;&lt;br&gt;&lt;/span&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class WorkerThread extends Thread {&#10;&amp;nbsp; &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; @Override&#10;&amp;nbsp; &amp;nbsp; public void run() {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // the method does something&#10;&amp;nbsp; &amp;nbsp; }&#10;}&lt;/code&gt;&lt;/pre&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    1) Create two instances of the given class and set the names like &#10;    &lt;b&gt;&quot;worker-X&quot;&lt;/b&gt;, where X is any suffix (the method &#10;    &lt;b&gt;setName(...)&lt;/b&gt;).&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    2) Start created threads. The method &#10;    &lt;b&gt;run&lt;/b&gt; of each instance must be executed in a new thread.&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;b&gt;Note: &lt;/b&gt;you don't need to write the given class; it will be added to your solution automatically.&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/4876&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2519" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2519" />
                      <option name="index" value="23" />
                      <option name="name" value="Starting multiple threads - 1" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        // create instances and start threads here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088454000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Starting multiple threads - 2&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2520&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;You are given a class that implements the &lt;/span&gt;&#10;   &lt;b&gt;Runnable&lt;/b&gt;&#10;   &lt;span&gt; interface.&lt;/span&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;class RunnableWorker implements Runnable {&#10;&amp;nbsp; &amp;nbsp; &#10;&amp;nbsp; &amp;nbsp; @Override&#10;&amp;nbsp; &amp;nbsp; public void run() {&#10;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; // the method does something&#10;&amp;nbsp; &amp;nbsp; }&#10;}&lt;/code&gt;&lt;/pre&gt; &#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   1) Create three threads using instances of the &#10;   &lt;b&gt;RunnableWorker&lt;/b&gt;. Set names to these threads like &#10;   &lt;b&gt;&quot;worker-X&quot;&lt;/b&gt;, where X is any suffix (the method &#10;   &lt;b&gt;setName(...)&lt;/b&gt;).&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;div&gt;&#10;    2) Start all created threads. The method &#10;    &lt;b&gt;run&lt;/b&gt; of each instance must be executed in a new thread.&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;br&gt;&#10;   &lt;/div&gt;&#10;   &lt;div&gt;&#10;    &lt;b&gt;Note: &lt;/b&gt;you don't need to write the given class; it will be added to your solution automatically.&#10;   &lt;/div&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/4876&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2520" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2520" />
                      <option name="index" value="24" />
                      <option name="name" value="Starting multiple threads - 2" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;&#10;    public static void main(String[] args) {&#10;&#10;        // create threads and start them using the class RunnableWorker&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088455000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The number of required shifts&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3173&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that counts the number of required shifts to sort the numbers in the descending order using insertion sort.&lt;/p&gt;&#10;  &lt;p&gt;By shift, we mean the case when we move elements in the sorted part to insert a new element. Another case is when a new element is added to the end of the sorted part without any shifts.&lt;/p&gt;&#10;  &lt;p&gt;The following picture shows both the cases. We do not need any shifts to add 21 to the sorted part, but we must perform a shift to insert 24 in the sorted part.&lt;/p&gt;&#10;  &lt;p&gt;&lt;span class=&quot;image-wrapper&quot;&gt;&lt;/span&gt;&lt;/p&gt;&#10;  &lt;p style=&quot;text-align: center;&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;image-fullsize&quot; src=&quot;https://ucarecdn.com/aef8be5b-ed50-4c74-ac68-a935809ba289/&quot; title=&quot;Image: https://ucarecdn.com/aef8be5b-ed50-4c74-ac68-a935809ba289/&quot;&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;/p&gt;&#10;  &lt;p&gt;Do not count the number of exchanges. You should count only the number of required shifts. An iteration may contain no more than one shift.&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The first line contains the number of elements. The second line consists of elements separated by space.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;Output one integer number - the number of required shifts.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;50 40 30 10 20&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;1&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;30 40 20 5 10 &lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;5 2 9 1 2 4 9 5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3529&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3173" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3173" />
                      <option name="index" value="25" />
                      <option name="name" value="The number of required shifts" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088487000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Count the number of merge operations&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/4328&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given an array of integers. Output the number of merge operations to solve the array using the standard top-down merge sort.&#10;  &lt;br&gt;&#10;  &lt;br&gt;The first line of the input contains N - a number of elements in the array. The second line contains array you need to sort.&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;9&lt;br&gt;1 4 7 6 8 4 5 3 2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3527&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/4328" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="4328" />
                      <option name="index" value="26" />
                      <option name="name" value="Count the number of merge operations" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        // write your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088500000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Merge all sequences&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3194&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Write a program that reads several descending sorted sequences of ints and merges them into one sequence. The merged sequence should be also sorted in the same order. Note, a sequence can have identical elements.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Input data format&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;The first line contains the integer number of sequences &lt;b&gt;N&lt;/b&gt;.&lt;/p&gt;&#10;  &lt;p&gt;The followed &lt;b&gt;N&lt;/b&gt; lines have two parts: the number of elements &lt;b&gt;M&lt;sub&gt;k&lt;/sub&gt;&lt;/b&gt; in a &lt;b&gt;k&lt;/b&gt;-sequence and its elements.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Output data format&lt;/b&gt;&lt;br&gt;&lt;/p&gt;&#10;  &lt;p&gt;All elements of the merged sequence. The elements should be separated by spaces.&lt;/p&gt;&#10;  &lt;p&gt;&lt;b&gt;Constraints&lt;/b&gt;&lt;/p&gt;&#10;  &lt;p&gt;1 &amp;lt;= &lt;b&gt;N&lt;/b&gt; &amp;lt;= 100, 1 &amp;lt;= &amp;nbsp;&lt;b&gt;M&lt;/b&gt;&lt;sub&gt;&lt;b&gt;k&lt;/b&gt;&lt;/sub&gt; &amp;lt;= 50000.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;4 8 7 6 6&lt;br&gt;5 9 7 7 4 4&lt;br&gt;3 2 2 1&lt;br&gt;4 15 7 4 2&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;15 9 8 7 7 7 7 6 6 4 4 4 2 2 2 1&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 1s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3527&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3194" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3194" />
                      <option name="index" value="27" />
                      <option name="name" value="Merge all sequences" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088488000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;The number of inversions&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3188&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The first line contains number &lt;span class=&quot;math-tex&quot;&gt;\( 1 \le n \le 10^5 \)&lt;/span&gt;, second one — array &lt;span class=&quot;math-tex&quot;&gt;\( A[1\ldots n] \)&lt;/span&gt;, containing natural numbers not greater than &lt;span class=&quot;math-tex&quot;&gt;\( 10^9 \)&lt;/span&gt;. You need to calculate the number of pairs of indexes&amp;nbsp;&lt;span class=&quot;math-tex&quot;&gt;\( 1 \le i \lt j \le n \)&lt;/span&gt;, for which &lt;span class=&quot;math-tex&quot;&gt;\( A[i] \gt A[j] \)&lt;/span&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Such pair of elements is called the inversion. The number of inversion in the array is in some way its measure of random nature: for example, there are no inversions at all in an array arranged in a non-decreasing order, and in an array, arranged in descending order, every two elements form an inversion.&lt;/p&gt; &#10;  &lt;p&gt;The result should be long, because an array can contain a lot of inversions.&lt;/p&gt; &#10;  &lt;p&gt;For example, the sequence 2, 4, 1, 3, 5 has three inversions: (2, 1), (4, 1), (4, 3).&lt;/p&gt; &#10;  &lt;p&gt;Modify merge sort and solve the problem using it.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5&lt;br&gt;2 4 1 3 5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 1s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3527&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3188" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3188" />
                      <option name="index" value="28" />
                      <option name="name" value="The number of inversions" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1564669087000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;A substring of the maximal length&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5722&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;h2 style=&quot;text-align: center;&quot;&gt;A substring of the maximal length&lt;/h2&gt; &#10;  &lt;p&gt;Given a string &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt;. Write a program that finds a substring of the maximal length that appears in &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt; at least twice.&lt;/p&gt; &#10;  &lt;p&gt;&lt;strong&gt;Hint:&lt;/strong&gt; try to come up with an algorithm that checks if there is a substring of length &lt;span class=&quot;math-tex&quot;&gt;\( k \)&lt;/span&gt; that appears in &lt;span class=&quot;math-tex&quot;&gt;\( s \)&lt;/span&gt; at least twice. Then, use a binary search to find a maximal &lt;span class=&quot;math-tex&quot;&gt;\( k \)&lt;/span&gt;.&lt;/p&gt; &#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;ACTTGATTGA&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;ABCD&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5719&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5722" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5722" />
                      <option name="index" value="29" />
                      <option name="name" value="A substring of the maximal length" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public class Main {&#10;    public static void main(String[] args) {&#10;        // put your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-10.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-10.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-11.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-11.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-3.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-3.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-15.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-15.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-13.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-13.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-12.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-12.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-22.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-22.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-21.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-21.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="src/5722-25.txt">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="src/5722-25.txt" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562571860000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Ordering execution of threads&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2536&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;div&gt;&#10;   &lt;span&gt;Implement a method that takes three objects (instances of Thread or its subclasses). The method must start passed objects as threads so that the order of their execution will be: &lt;/span&gt;&#10;   &lt;b&gt;t3, t2, t1&lt;/b&gt;&#10;   &lt;span&gt;. These threads print secret phrases in the standard output, their output must be always the same.&lt;/span&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   All given threads must be terminated before the implemented method is completed.&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   So, the testing system will give you some hints throwing exceptions in the main thread, like:&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;br&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;   &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Exception in thread &quot;main&quot; java.lang.RuntimeException: All threads must be terminated before ending the implemented method&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3619&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2536" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2536" />
                      <option name="index" value="30" />
                      <option name="name" value="Ordering execution of threads" />
                      <option name="record" value="-1" />
                      <option name="status" value="Unchecked" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="public static void invokeMethods(Thread t1, Thread t2, Thread t3) throws InterruptedException {&#10;    // start passed instances here &#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088456000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Output the list's elements&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/2322&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The list of strings is given.&lt;b&gt;&lt;/b&gt;&lt;/p&gt;&#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;ArrayList&amp;lt;String&amp;gt; nameList = new ArrayList&amp;lt;&amp;gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&lt;/code&gt;&lt;/pre&gt;&#10;  &lt;p&gt;&lt;b&gt;&lt;/b&gt;Output each its element in the loop. Each element must be in new line.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Mr.Green&lt;br&gt;Mr.Yellow&lt;br&gt;Mr.Red&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3567&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/2322" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="2322" />
                      <option name="index" value="31" />
                      <option name="name" value="Output the list's elements" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        ArrayList&lt;String&gt; nameList = new ArrayList&lt;&gt;(Arrays.asList(&quot;Mr.Green&quot;, &quot;Mr.Yellow&quot;, &quot;Mr.Red&quot;));&#10;        // write your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1555340106000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Concat positive numbers&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3482&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;Implement a method to concatenate all positive numbers of two input &lt;code&gt;ArrayList&lt;/code&gt;'s to a single result list.&lt;/p&gt; &#10;  &lt;p&gt;The first part of the result list must be filled with elements from the first &lt;code&gt;ArrayList&lt;/code&gt;, and the second part with elements from the second &lt;code&gt;ArrayList&lt;/code&gt;.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;8 11 -2 -3 14 15&lt;br&gt;-1 33 12 -3 -5&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;8 11 14 15 33 12&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3567&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3482" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3482" />
                      <option name="index" value="32" />
                      <option name="name" value="Concat positive numbers" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.ArrayList;&#10;import java.util.Arrays;&#10;import java.util.Scanner;&#10;import java.util.stream.Collectors;&#10;&#10;class ConcatPositiveNumbersProblem {&#10;&#10;    public static ArrayList&lt;Integer&gt; concatPositiveNumbers(ArrayList&lt;Integer&gt; l1, ArrayList&lt;Integer&gt; l2) {&#10;        return l1; // write your code here&#10;    }&#10;&#10;    /* Do not modify this method */&#10;    public static void main(String[] args) {&#10;        Scanner scanner = new Scanner(System.in);&#10;&#10;        ArrayList&lt;Integer&gt; list1 = readArrayList(scanner);&#10;        ArrayList&lt;Integer&gt; list2 = readArrayList(scanner);&#10;&#10;        ArrayList&lt;Integer&gt; result = concatPositiveNumbers(list1, list2);&#10;&#10;        result.forEach((n) -&gt; System.out.print(n + &quot; &quot;));&#10;    }&#10;&#10;    /* Do not modify this method */&#10;    private static ArrayList&lt;Integer&gt; readArrayList(Scanner scanner) {&#10;        return Arrays&#10;                .stream(scanner.nextLine().split(&quot;\\s+&quot;))&#10;                .map(Integer::parseInt)&#10;                .collect(Collectors.toCollection(ArrayList::new));&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1565700001000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Find the nearest number&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3794&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  Given a sequence of integers, and a number N, find out the closest integer from the array to the N.&#10;  &lt;div&gt;&#10;   If you find several integers with the same distance to the N, you should output all of them in the ascending order.&#10;  &lt;/div&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2 4 5&lt;br&gt;3&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;2 4&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;1 2 3 4&lt;br&gt;6&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;4&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;5 1 3 3 1 5&lt;br&gt;4&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;3 3 5 5&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3567&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3794" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3794" />
                      <option name="index" value="33" />
                      <option name="name" value="Find the nearest number" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.*;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        // write your code here&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1541088497000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Motor static factory&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3325&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;In the very heart of suburbia, there stood a motor factory; in the very heart of that factory worked a programmer. Implement the static method &lt;code&gt;make&lt;/code&gt; of the &lt;code&gt;MotorStaticFactory&lt;/code&gt; that produces motors of different types. The method takes three parameters: the &lt;code&gt;type&lt;/code&gt; of a motor as a character, &lt;code&gt;model&lt;/code&gt; as a string, and &lt;code&gt;power&lt;/code&gt; as a long number. It should return a new motor according to the &lt;code&gt;type&lt;/code&gt; with initialized fields.&lt;/p&gt; &#10;  &lt;p&gt;Here is&amp;nbsp;the correspondence between the passed type and the class of the motor: &lt;code&gt;'P'&lt;/code&gt;&amp;nbsp;for&amp;nbsp;pneumatic, &lt;code&gt;'H'&lt;/code&gt;&amp;nbsp;for hydraulic, &lt;code&gt;'E'&lt;/code&gt;&amp;nbsp;for electric and&amp;nbsp;&lt;code&gt;'W'&lt;/code&gt;&amp;nbsp;for&amp;nbsp;warp. Ignore the upper/lower case when creating motors, i.e. &lt;code&gt;'p'&lt;/code&gt; must work as well as &lt;code&gt;'P'&lt;/code&gt;. If an invalid character is given, the method should return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Do not change the provided code of the motor classes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3577&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3325" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3325" />
                      <option name="index" value="34" />
                      <option name="name" value="Motor static factory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class MotorStaticFactory {&#10;&#10;    /**&#10;     * It returns an initialized motor according to the specified type by the first character:&#10;     * 'P' or 'p' - pneumatic, 'H' or 'h' - hydraulic, 'E' or 'e' - electric, 'W' or 'w' - warp.&#10;     */&#10;    public static Motor make(char type, String model, long power) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;abstract class Motor {&#10;&#10;    String model;&#10;    long power;&#10;&#10;    public Motor(String model, long power) {&#10;        this.model = model;&#10;        this.power = power;&#10;    }&#10;}&#10;&#10;class PneumaticMotor extends Motor {&#10;&#10;    public PneumaticMotor(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;class HydraulicMotor extends Motor {&#10;&#10;    public HydraulicMotor(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;class ElectricMotor extends Motor {&#10;&#10;    public ElectricMotor(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;class WarpDrive extends Motor {&#10;&#10;    public WarpDrive(String model, long power) {&#10;        super(model, power);&#10;    }&#10;}&#10;&#10;public class Main {&#10;    public static void main(String args[]) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;        final char type = scanner.next().charAt(0);&#10;        final String model = scanner.next();&#10;        final long power = scanner.nextLong();&#10;        final Motor motor = MotorStaticFactory.make(type, model, power);&#10;        if (motor == null) {&#10;            System.out.println(motor);&#10;        } else {&#10;            System.out.println(motor.getClass().getName() + &quot; &quot; + motor.model + &quot; &quot; + motor.power);&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1564656233000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Clock factory&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3324&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;There is a&amp;nbsp;hierarchy of clocks with the base interface &lt;code&gt;Clock&lt;/code&gt; and the class &lt;code&gt;ClockFactory&lt;/code&gt; to produces instances.&lt;/p&gt; &#10;  &lt;p&gt;Implement the method &lt;code&gt;produce&lt;/code&gt; of the factory. It should return a clock according to the specified type string:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&quot;SAND&quot; - &lt;code&gt;SandClock&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;&quot;DIGITAL&quot; - &lt;code&gt;DigitalClock&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;&quot;MECH&quot; - &lt;code&gt;MechanicalClock&lt;/code&gt;.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;The single constructor of the factory takes the boolean parameter &lt;code&gt;produceToyClock&lt;/code&gt;. It determines what the factory does when an unsuitable type of clock is passed. If it is &lt;code&gt;true&lt;/code&gt;, the factory should produce an instance of &lt;code&gt;ToyClock&lt;/code&gt;, otherwise,&amp;nbsp;return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt; &#10;  &lt;p&gt;Do not change the provided code of the clock classes.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3577&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3324" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3324" />
                      <option name="index" value="35" />
                      <option name="name" value="Clock factory" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class ClockFactory {&#10;&#10;    private boolean produceToyClock;&#10;&#10;    public ClockFactory(boolean produceToyClock) {&#10;        this.produceToyClock = produceToyClock;&#10;    }&#10;&#10;    /**&#10;     * It produces a clock according to a specified type: SAND, DIGITAL or MECH.&#10;     * If some other type is passed, the method produces ToyClock.&#10;     */&#10;    public Clock produce(String type) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;interface Clock {&#10;&#10;    void tick();&#10;}&#10;&#10;class SandClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...sand noise...&quot;);&#10;    }&#10;}&#10;&#10;class DigitalClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...pim...&quot;);&#10;    }&#10;}&#10;&#10;class MechanicalClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...clang mechanism...&quot;);&#10;    }&#10;}&#10;&#10;class ToyClock implements Clock {&#10;&#10;    @Override&#10;    public void tick() {&#10;        System.out.println(&quot;...tick...&quot;);&#10;    }&#10;}&#10;&#10;public class Main {&#10;    public static void main(String args[]) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;        final String type = scanner.next();&#10;        final boolean produceToy = scanner.nextBoolean();&#10;        final ClockFactory factory = new ClockFactory(produceToy);&#10;        final Clock clock = factory.produce(type);&#10;        if (clock != null) {&#10;            clock.tick();&#10;        } else {&#10;            System.out.println(clock);&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562793993000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Static factory methods for Time&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/3328&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The normal way to create an instance of a class is to use a public constructor of the class. But there is another technique. A class can provide a public static factory method that returns an instance of the class. An advantage of static factory methods is that they have names that make the code easier to read.&lt;/p&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;In this problem, you have the class &lt;code&gt;Time&lt;/code&gt; containing three fields: &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;minute&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt;. Implement the following static factory methods of this class:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;&lt;code&gt;noon()&lt;/code&gt; returns an instance initialized with 12 hours, 0 minutes, and 0 seconds.&lt;/li&gt; &#10;   &lt;li&gt;&lt;code&gt;midnight()&lt;/code&gt; returns an instance initialized with 0 hours, 0 minutes, and 0 seconds.&lt;/li&gt; &#10;   &lt;li&gt;&lt;code&gt;of(int hour, int minute, int second)&lt;/code&gt; returns an instance initialized with passed hour, minute and second if the passed arguments are correct (hour: 0-23, minute: 0-59, seconds: 0-59), otherwise, &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt; &#10;   &lt;li&gt;&lt;code&gt;ofSeconds(long seconds)&lt;/code&gt; returns an instance initialized with seconds passed since midnight; as an example, the invocation &lt;code&gt;Time.ofSeconds(500000)&lt;/code&gt; must create an instance with 18 hours, 53 minutes and 20 seconds (days are skipped);&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;As you see, the methods are more readable than the same constructors. If you want to create an instance of &lt;code&gt;Time&lt;/code&gt; representing noon, you can write:&lt;/p&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#10;  &lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;Time noon = Time.noon();&lt;/code&gt;&lt;/pre&gt; &#10;  &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#10;  &lt;p&gt;Note:&lt;/p&gt; &#10;  &lt;ul&gt; &#10;   &lt;li&gt;do not change fields of the class &lt;code&gt;Time&lt;/code&gt;;&lt;/li&gt; &#10;   &lt;li&gt;in a real application, it may be better to throw an exception than return &lt;code&gt;null&lt;/code&gt; when arguments are incorrect.&lt;/li&gt; &#10;  &lt;/ul&gt; &#10;  &lt;p&gt;You must not read or output something in this problem. Just implement the static factory methods.&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;noon&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;12 0 0&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;midnight&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;0 0 0&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/3577&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/3328" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="3328" />
                      <option name="index" value="36" />
                      <option name="name" value="Static factory methods for Time" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="import java.util.Scanner;&#10;&#10;class Time {&#10;&#10;    int hour;&#10;    int minute;&#10;    int second;&#10;&#10;    public static Time noon() {&#10;        // write your code here&#10;    }&#10;&#10;    public static Time midnight() {&#10;        // write your code here&#10;    }&#10;&#10;    public static Time ofSeconds(long seconds) {&#10;        // write your code here&#10;    }&#10;&#10;    public static Time of(int hour, int minute, int second) {&#10;        // write your code here&#10;    }&#10;}&#10;&#10;/* Do not change code below */&#10;public class Main {&#10;&#10;    public static void main(String args[]) {&#10;        final Scanner scanner = new Scanner(System.in);&#10;&#10;        final String type = scanner.next();&#10;        Time time = null;&#10;&#10;        switch (type) {&#10;            case &quot;noon&quot;:&#10;                time = Time.noon();&#10;                break;&#10;            case &quot;midnight&quot;:&#10;                time = Time.midnight();&#10;                break;&#10;            case &quot;hms&quot;:&#10;                int h = scanner.nextInt();&#10;                int m = scanner.nextInt();&#10;                int s = scanner.nextInt();&#10;                time = Time.of(h, m, s);&#10;                break;&#10;            case &quot;seconds&quot;:&#10;                time = Time.ofSeconds(scanner.nextInt());&#10;                break;&#10;            default:&#10;                time = null;&#10;                break;&#10;        }&#10;&#10;        if (time != null) {&#10;            System.out.println(String.format(&quot;%s %s %s&quot;, time.hour, time.minute, time.second));&#10;        } else {&#10;            System.out.println(time);&#10;        }&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562803388000" />
                    </CodeTask>
                    <CodeTask>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="HTML" />
                      <option name="descriptionText" value="&lt;b&gt;Laptop store&lt;/b&gt; &lt;a class=&quot;right&quot; href=&quot;https://hyperskill.org/learn/step/5769&quot;&gt;Open on Hyperskill&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;html&gt;&#10; &lt;head&gt;&lt;/head&gt;&#10; &lt;body&gt;&#10;  &lt;p&gt;The first part of the task is to imagine you are&amp;nbsp;the boss of a&amp;nbsp;&lt;em&gt;LaptopStore. &lt;/em&gt;The real task though is the code: your engineer should be able to create 17'', 15'' or 13'' laptops without any concrete details.&amp;nbsp;&lt;/p&gt;&#10; &lt;/body&gt;&#10;&lt;/html&gt;&lt;br&gt;&lt;b&gt;Sample Input:&lt;/b&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Sample Output:&lt;/b&gt;&lt;br&gt;Making a 13 inch Laptop&lt;br&gt;Attaching keyboard&lt;br&gt;Attaching trackpad&lt;br&gt;Attaching display&lt;br&gt;Done a 13 inch Laptop&lt;br&gt;&lt;br&gt;Making a 15 inch Laptop&lt;br&gt;Attaching keyboard&lt;br&gt;Attaching trackpad&lt;br&gt;Attaching display&lt;br&gt;Done a 15 inch Laptop&lt;br&gt;&lt;br&gt;Making a 17 inch Laptop&lt;br&gt;Attaching keyboard&lt;br&gt;Attaching trackpad&lt;br&gt;Attaching display&lt;br&gt;Done a 17 inch Laptop&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Memory limit: 256 Mb&lt;/font&gt;&lt;br&gt;&lt;font color=&quot;gray&quot;&gt;Time limit: 5s&lt;/font&gt;&lt;br&gt;&lt;br&gt;&lt;br/&gt;&lt;a href=&quot;https://hyperskill.org/learn/step/5761&quot;&gt;Show topic summary&lt;/a&gt;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" value="https://hyperskill.org/learn/step/5769" />
                          <option name="type" value="CUSTOM" />
                        </FeedbackLink>
                      </option>
                      <option name="id" value="5769" />
                      <option name="index" value="37" />
                      <option name="name" value="Laptop store" />
                      <option name="record" value="-1" />
                      <option name="status" value="Solved" />
                      <option name="files">
                        <map>
                          <entry key="src/Main.java">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="src/Main.java" />
                                <option name="text" value="class TestDrive {&#10;    public static void main(String[] args) throws InterruptedException {&#10;        LaptopStore laptopStore = /* write your code here */&#10;&#10;        Laptop laptop13 = laptopStore.orderLaptop(&quot;13 inch&quot;);&#10;        Laptop laptop15 = laptopStore.orderLaptop(&quot;15 inch&quot;);&#10;        Laptop laptop17 = laptopStore.orderLaptop(&quot;17 inch&quot;);&#10;    }&#10;}&#10;&#10;abstract class LaptopFactory {&#10;&#10;    abstract Laptop createLaptop(String type);&#10;&#10;    Laptop orderLaptop(String type) throws InterruptedException {&#10;        Laptop laptop = createLaptop(type);&#10;        if (laptop == null) {&#10;            System.out.println(&quot;Sorry, we are not able to create this kind of laptop\n&quot;);&#10;            return null;&#10;        }&#10;        System.out.println(&quot;Making a &quot; + laptop.getName());&#10;        laptop.attachKeyboard();&#10;        laptop.attachTrackpad();&#10;        laptop.attachDisplay();&#10;        Thread.sleep(1500L);&#10;        System.out.println(&quot;Done a &quot; + laptop.getName() + &quot;\n&quot;);&#10;        return laptop;&#10;    }&#10;}&#10;&#10;class LaptopStore extends LaptopFactory {&#10;    @Override&#10;    Laptop createLaptop(String type) {&#10;        switch (type) {&#10;            case &quot;13 inch&quot;:&#10;                return new Laptop13(&quot;13 inch Laptop&quot;);&#10;            case &quot;15 inch&quot;:&#10;                return new Laptop15(&quot;15 inch Laptop&quot;);&#10;            case &quot;17 inch&quot;:&#10;                return new Laptop17(&quot;17 inch Laptop&quot;);&#10;            default:&#10;                return null;&#10;        }&#10;    }&#10;}&#10;&#10;abstract class Laptop {&#10;    private String name;&#10;&#10;    Laptop(String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    String getName() {&#10;        return name;&#10;    }&#10;&#10;    void attachKeyboard() {&#10;        System.out.println(&quot;Attaching keyboard&quot;);&#10;    }&#10;&#10;    void attachTrackpad() {&#10;        System.out.println(&quot;Attaching trackpad&quot;);&#10;    }&#10;&#10;    void attachDisplay() {&#10;        System.out.println(&quot;Attaching display&quot;);&#10;    }&#10;}&#10;&#10;class Laptop13 extends Laptop {&#10;    Laptop13(String name) {&#10;        super(name);&#10;    }&#10;}&#10;&#10;class Laptop15 extends Laptop {&#10;    Laptop15(String name) {&#10;        super(name);&#10;    }&#10;}&#10;&#10;class Laptop17 extends Laptop {&#10;    Laptop17(String name) {&#10;        super(name);&#10;    }&#10;}" />
                                <option name="trackChanges" value="true" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="updateDate" value="1562952946000" />
                    </CodeTask>
                  </list>
                </option>
              </Lesson>
            </list>
          </option>
        </HyperskillCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>